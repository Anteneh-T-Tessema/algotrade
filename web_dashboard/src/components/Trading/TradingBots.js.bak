// TradingBots.js - Component for managing automated trading bots
import React, { useState, useEffect, useMemo } from 'react';
import {
  Box,
  Paper,
  Grid,
  Typography,
  CircularProgress,
  Alert,
  AlertTitle,
  Card,
  CardContent,
  CardActions,
  CardHeader,
  Tab,
  Tabs,
  Button,
  Slider,
  TextField,
  FormControl,
  FormControlLabel,
  InputLabel,
  MenuItem,
  Select,
  Switch,
  Divider,
  Tooltip,
  IconButton,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  LinearProgress,
  Stack,
  Badge,
  Collapse,
  Avatar,
  ButtonGroup,
  Radio,
  RadioGroup,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  ToggleButtonGroup,
  ToggleButton,
  Autocomplete,
  Link,
  InputAdornment,
  Cell,
  Rating
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import {
  PlayArrow,
  Stop,
  Delete,
  Edit,
  BarChart,
  Timeline,
  Refresh,
  Add,
  Save,
  Close,
  Settings,
  ShowChart,
  TrendingUp,
  TrendingDown,
  TrendingFlat,
  Assessment,
  Autorenew,
  Warning,
  CheckCircle,
  Error,
  Info,
  History,
  CompareArrows,
  NotificationsActive,
  ExpandMore,
  ImportExport,
  MoneyOff,
  AccountBalance,
  Security,
  CreditCard,
  Dashboard,
  Speed,
  Tune,
  Favorite,
  FavoriteBorder,
  Share,
  FileCopy,
  Code,
  GitHub,
  Visibility,
  VisibilityOff,
  CloudDownload,
  Launch
} from '@mui/icons-material';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Legend,
  BarChart as RechartsBarChart,
  Bar,
  Scatter,
  ScatterChart,
  Pie,
  PieChart,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
  ComposedChart,
  Brush,
  Tooltip,
  ResponsiveContainer
} from 'recharts';

import TradingBotService from '../../services/TradingBotService';
import TradingService from '../../services/TradingService';
import RiskManagement from '../../components/Risk/RiskManagement';
import TradingBotsSettingsTab from './TradingBotsSettingsTab';

const TradingBots = () => {
  // State for tab management
  const [tabValue, setTabValue] = useState(0); // Default to first tab (My Bots)
  
  // State for bots data
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [bots, setBots] = useState([]);
  const [botTemplates, setBotTemplates] = useState([]);
  const [selectedBot, setSelectedBot] = useState(null);
  const [botDetails, setBotDetails] = useState(null);
  const [botPerformance, setBotPerformance] = useState(null);
  const [botTradeHistory, setBotTradeHistory] = useState(null);
  const [performancePeriod, setPerformancePeriod] = useState('1m');
  
  // State for bot creation/editing
  const [isCreatingBot, setIsCreatingBot] = useState(false);
  const [isEditingBot, setIsEditingBot] = useState(false);
  const [newBotConfig, setNewBotConfig] = useState({
    name: '',
    description: '',
    strategy: '',
    symbol: 'BTCUSDT',
    allocation: 10,
    riskLevel: 'medium',
    parameters: {},
    enabled: false,
    riskControls: {
      maxDrawdown: 15,
      stopLoss: 5,
      takeProfit: 10,
      trailingStop: false,
      trailingStopPercent: 2,
      maxDailyTrades: 10,
      maxOpenTrades: 3,
      maxDailyLoss: 5
    }
  });
  
  // State for available options
  const [availableStrategies, setAvailableStrategies] = useState([]);
  const [availablePairs, setAvailablePairs] = useState([]);
  const [availableIndicators, setAvailableIndicators] = useState([]);
  
  // State for dialogs
  const [dialogOpen, setDialogOpen] = useState(false);
  const [dialogType, setDialogType] = useState('');
  const [dialogData, setDialogData] = useState(null);
  
  // State for backtesting
  const [backtestConfig, setBacktestConfig] = useState({
    strategy: '',
    symbol: 'BTCUSDT',
    startDate: '',
    endDate: '',
    initialCapital: 10000,
    parameters: {},
    riskControls: {
      maxDrawdown: 15,
      stopLoss: 5,
      takeProfit: 10,
      trailingStop: false,
      trailingStopPercent: 2
    }
  });
  const [isBacktesting, setIsBacktesting] = useState(false);
  const [backtestResults, setBacktestResults] = useState(null);

  // New state variables for enhanced features
  const [favoriteBotsIds, setFavoriteBotsIds] = useState([]);
  const [portfolioPerformance, setPortfolioPerformance] = useState(null);
  const [isViewingPortfolio, setIsViewingPortfolio] = useState(false);
  const [comparisonBots, setComparisonBots] = useState([]);
  const [isComparingBots, setIsComparingBots] = useState(false);
  const [botFilterValue, setBotFilterValue] = useState('all');
  const [botSortOption, setBotSortOption] = useState('performance');
  const [chartType, setChartType] = useState('area');
  const [showAdvancedBacktestOptions, setShowAdvancedBacktestOptions] = useState(false);
  const [alertsConfig, setAlertsConfig] = useState({
    profitTarget: false,
    profitValue: 10,
    lossLimit: false,
    lossValue: 5,
    tradingVolumeAlert: false,
    tradingVolumeValue: 1000,
    botErrorNotification: true
  });
  const [strategyCode, setStrategyCode] = useState('');
  const [isCustomizingStrategy, setIsCustomizingStrategy] = useState(false);
  
  // State for AI Strategy Suggestions
  const [isAiSuggestionsOpen, setIsAiSuggestionsOpen] = useState(false);
  const [aiStrategySuggestions, setAiStrategySuggestions] = useState(null);
  const [aiSuggestionsLoading, setAiSuggestionsLoading] = useState(false);
  const [marketConditionData, setMarketConditionData] = useState({
    timeframe: '1d',
    marketSentiment: 'neutral',
    volatilityLevel: 'medium',
    trendStrength: 'moderate',
    riskTolerance: 'medium'
  });
  
  // State for social trading features
  const [socialTradingTab, setSocialTradingTab] = useState(0);
  const [popularTraders, setPopularTraders] = useState([]);
  const [followedTraders, setFollowedTraders] = useState([]);
  const [tradingSignals, setTradingSignals] = useState([]);
  const [socialTradingLoading, setSocialTradingLoading] = useState(false);
  
  // State for notification center
  const [notifications, setNotifications] = useState([]);
  const [unreadNotifications, setUnreadNotifications] = useState(0);
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const [notificationPreferences, setNotificationPreferences] = useState({
    botStartStop: true,
    profitThreshold: true,
    lossThreshold: true,
    technicalSignals: true,
    socialSignals: true,
    systemAlerts: true,
    emailNotifications: true,
    pushNotifications: false
  });
  
  // State for advanced charting and backtesting
  const [advancedChartData, setAdvancedChartData] = useState(null);
  const [selectedIndicators, setSelectedIndicators] = useState([]);
  const [availableChartTypes, setAvailableChartTypes] = useState([
    'candlestick', 'ohlc', 'line', 'area', 'bar', 
    'heiken-ashi', 'renko', 'kagi', 'point-and-figure'
  ]);
  const [advancedBacktestConfig, setAdvancedBacktestConfig] = useState({
    strategy: '',
    symbol: 'BTCUSDT',
    timeframe: '1h',
    startDate: '',
    endDate: '',
    initialCapital: 10000,
    indicators: [],
    customParameters: {},
    riskControls: {
      maxDrawdown: 15,
      stopLoss: 5,
      takeProfit: 10,
      trailingStop: false,
      trailingStopPercent: 2,
      maxOpenPositions: 3,
      positionSizing: 'percentage',
      positionSizeValue: 10
    },
    marketRegimeFilter: {
      enabled: false,
      regimes: ['trending', 'ranging', 'volatile']
    }
  });

  // State for news and sentiment analysis 
  const [newsArticles, setNewsArticles] = useState([]);
  const [newsLoading, setNewsLoading] = useState(false);
  const [socialSentiment, setSocialSentiment] = useState(null);
  const [newsSentiment, setNewsSentiment] = useState(null);
  const [upcomingEvents, setUpcomingEvents] = useState([]);
  const [selectedNewsSymbol, setSelectedNewsSymbol] = useState('BTC');
  
  // State for ML predictions and market analysis
  const [mlPredictions, setMlPredictions] = useState(null);
  const [marketRegime, setMarketRegime] = useState(null);
  const [marketAnomalies, setMarketAnomalies] = useState([]);
  const [mlModelType, setMlModelType] = useState('ensemble');
  const [mlLoadingPredictions, setMlLoadingPredictions] = useState(false);
  
  // State for risk management and portfolio optimization
  const [portfolioRiskAnalysis, setPortfolioRiskAnalysis] = useState(null);
  const [valueAtRisk, setValueAtRisk] = useState(null);
  const [stressTestResults, setStressTestResults] = useState(null);
  const [hedgingRecommendations, setHedgingRecommendations] = useState([]);
  const [selectedRiskProfile, setSelectedRiskProfile] = useState('medium');
  const [riskScenario, setRiskScenario] = useState('bearMarket');

  // State for advanced charting
  const [advancedChartOptions, setAdvancedChartOptions] = useState({
    showVolume: true,
    showMA: true,
    maLength: 20,
    showBollingerBands: false,
    bbPeriod: 20,
    bbStdDev: 2,
    showRSI: false,
    rsiPeriod: 14,
    showMACD: false,
    macdFast: 12,
    macdSlow: 26,
    macdSignal: 9
  });

  // Theme
  const theme = useTheme();

  // Load initial data
  useEffect(() => {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [performancePeriod]);
  
  // Load bot details when selected
  useEffect(() => {
    const fetchBotDetails = async () => {
      if (!selectedBot) {
        setBotDetails(null);
        setBotPerformance(null);
        setBotTradeHistory(null);
        return;
      }
      
      try {
        setLoading(true);
        
        // Fetch bot details
        const details = await TradingBotService.getBotDetails(selectedBot);
        setBotDetails(details);
        
        // Fetch bot performance
        const performance = await TradingBotService.getBotPerformance(selectedBot, performancePeriod);
        setBotPerformance(performance);
        
        // Fetch bot trade history
        const trades = await TradingBotService.getBotTradeHistory(selectedBot);
        setBotTradeHistory(trades);
        
      } catch (err) {
        console.error(`Failed to load bot details for ${selectedBot}:`, err);
        setError(`Failed to load bot details: ${err.message}`);
      } finally {
        setLoading(false);
      }
    };
    
    fetchBotDetails();
  }, [selectedBot, performancePeriod]);

  // Load notifications
  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        const result = await TradingBotService.getUserNotifications();
        setNotifications(result.notifications || []);
        setUnreadNotifications(result.notifications?.filter(n => !n.read).length || 0);
      } catch (err) {
        console.error('Failed to fetch notifications:', err);
      }
    };
    
    fetchNotifications();
    
    // Set up polling for real-time notifications (every 30 seconds)
    const notificationInterval = setInterval(fetchNotifications, 30000);
    
    return () => {
      clearInterval(notificationInterval);
    };
  }, []);
  
  // Load social trading data
  useEffect(() => {
    const fetchSocialTradingData = async () => {
      if (tabValue !== 3) return; // Only load if social tab is active
      
      try {
        setSocialTradingLoading(true);
        
        // Get popular traders
        const populars = await TradingBotService.getPopularTraders();
        setPopularTraders(populars || []);
        
        // Get followed traders
        const followed = await TradingBotService.getFollowedTraders();
        setFollowedTraders(followed || []);
        
        // Get trading signals
        const signals = await TradingBotService.getTradingSignals();
        setTradingSignals(signals || []);
        
      } catch (err) {
        console.error('Failed to load social trading data:', err);
      } finally {
        setSocialTradingLoading(false);
      }
    };
    
    fetchSocialTradingData();
  }, [tabValue, socialTradingTab]);
  
  // Load notifications preferences
  useEffect(() => {
    if (!isNotificationsOpen) return;
    
    const fetchNotificationPreferences = async () => {
      try {
        // This API would be implemented on the backend to get user preferences
        const response = await api.get(`${API_BASE}/notifications/preferences`);
        setNotificationPreferences(response.data || notificationPreferences);
      } catch (err) {
        console.error('Failed to load notification preferences:', err);
      }
    };
    
    fetchNotificationPreferences();
  }, [isNotificationsOpen]);

  // Load news and sentiment data
  useEffect(() => {
    if (tabValue !== 5) return; // Only load if news tab is active
    
    const fetchNewsAndSentiment = async () => {
      try {
        setNewsLoading(true);
        
        // Fetch crypto news
        const news = await TradingBotService.getCryptoNews(selectedNewsSymbol);
        setNewsArticles(news || []);
        
        // Fetch social sentiment
        const social = await TradingBotService.getSocialSentiment(selectedNewsSymbol);
        setSocialSentiment(social);
        
        // Fetch news sentiment
        const newsSentiment = await TradingBotService.getNewsSentiment(selectedNewsSymbol);
        setNewsSentiment(newsSentiment);
        
        // Fetch upcoming events
        const events = await TradingBotService.getCryptoEvents(selectedNewsSymbol);
        setUpcomingEvents(events || []);
        
      } catch (err) {
        console.error('Failed to load news and sentiment data:', err);
      } finally {
        setNewsLoading(false);
      }
    };
    
    fetchNewsAndSentiment();
  }, [tabValue, selectedNewsSymbol]);
  
  // Load ML predictions and market analysis
  useEffect(() => {
    if (tabValue !== 5) return; // Only load if ML/Analysis tab is active
    
    const fetchMlPredictions = async () => {
      try {
        setMlLoadingPredictions(true);
        
        // Fetch ML price predictions
        const predictions = await TradingBotService.getMlPricePredictions(
          advancedBacktestConfig.symbol,
          advancedBacktestConfig.timeframe,
          mlModelType
        );
        setMlPredictions(predictions);
        
        // Fetch market regime
        const regime = await TradingBotService.getMarketRegime(
          advancedBacktestConfig.symbol,
          advancedBacktestConfig.timeframe
        );
        setMarketRegime(regime);
        
        // Fetch market anomalies
        const anomalies = await TradingBotService.getMarketAnomalies(
          advancedBacktestConfig.symbol,
          advancedBacktestConfig.timeframe
        );
        setMarketAnomalies(anomalies || []);
        
      } catch (err) {
        console.error('Failed to load ML predictions and market analysis:', err);
      } finally {
        setMlLoadingPredictions(false);
      }
    };
    
    fetchMlPredictions();
  }, [tabValue, advancedBacktestConfig.symbol, advancedBacktestConfig.timeframe, mlModelType]);

  // Load risk management data
  useEffect(() => {
    if (tabValue !== 6) return; // Only load if Risk Management tab is active
    
    const fetchRiskData = async () => {
      try {
        // Get current positions from active bots
        const positions = bots
          .filter(bot => bot.active)
          .map(bot => ({
            symbol: bot.symbol,
            allocation: bot.allocation,
            value: bot.currentValue || 0
          }));
        
        // Skip if no positions
        if (positions.length === 0) {
          setPortfolioRiskAnalysis(null);
          return;
        }
        
        // Fetch risk analysis
        const riskAnalysis = await TradingBotService.getDetailedRiskAnalysis(positions);
        setPortfolioRiskAnalysis(riskAnalysis);
        
        // Fetch Value at Risk
        const var95 = await TradingBotService.getValueAtRisk(positions, 95);
        setValueAtRisk(var95);
        
        // Fetch stress test results
        const stressTest = await TradingBotService.getPortfolioStressTest(positions, riskScenario);
        setStressTestResults(stressTest);
        
        // Fetch hedging recommendations
        const hedging = await TradingBotService.getHedgingRecommendations(positions);
        setHedgingRecommendations(hedging || []);
        
      } catch (err) {
        console.error('Failed to load risk management data:', err);
      }
    };
    
    fetchRiskData();
  }, [tabValue, bots, riskScenario]);

  // Handle tab changes
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Handle bot selection
  const handleSelectBot = (botId) => {
    setSelectedBot(botId);
    setTabValue(1); // Switch to details tab
  };
  
  // Handle bot creation
  const handleCreateBot = () => {
    // Reset new bot config
    setNewBotConfig({
      name: '',
      description: '',
      strategy: availableStrategies.length > 0 ? availableStrategies[0].id : '',
      symbol: 'BTCUSDT',
      allocation: 10,
      riskLevel: 'medium',
      parameters: {},
      enabled: false,
      riskControls: {
        maxDrawdown: 15,
        stopLoss: 5,
        takeProfit: 10,
        trailingStop: false,
        trailingStopPercent: 2,
        maxDailyTrades: 10,
        maxOpenTrades: 3,
        maxDailyLoss: 5
      }
    });
    
    // If there are strategies available, set the default parameters
    if (availableStrategies.length > 0) {
      const defaultStrategy = availableStrategies[0];
      const defaultParams = {};
      
      // Initialize with default values if available
      if (defaultStrategy.parameters) {
        defaultStrategy.parameters.forEach(param => {
          defaultParams[param.name] = param.default !== undefined ? param.default : '';
        });
      }
      
      setNewBotConfig(prev => ({
        ...prev,
        parameters: defaultParams
      }));
    }
    
    setIsCreatingBot(true);
    setIsEditingBot(false);
  };
  
  // Handle bot editing
  const handleEditBot = (bot) => {
    setNewBotConfig({
      id: bot.id,
      name: bot.name,
      description: bot.description,
      strategy: bot.strategy,
      symbol: bot.symbol,
      allocation: bot.allocation,
      riskLevel: bot.riskLevel,
      parameters: { ...bot.parameters },
      enabled: bot.enabled,
      riskControls: { ...bot.riskControls }
    });
    
    setIsCreatingBot(false);
    setIsEditingBot(true);
  };
  
  // Handle bot strategy change
  const handleStrategyChange = (strategyId) => {
    // Find the selected strategy
    const strategy = availableStrategies.find(s => s.id === strategyId);
    
    if (strategy) {
      // Update parameters based on the selected strategy
      const newParams = {};
      
      if (strategy.parameters) {
        strategy.parameters.forEach(param => {
          newParams[param.name] = param.default !== undefined ? param.default : '';
        });
      }
      
      setNewBotConfig(prev => ({
        ...prev,
        strategy: strategyId,
        parameters: newParams
      }));
    } else {
      setNewBotConfig(prev => ({
        ...prev,
        strategy: strategyId,
        parameters: {}
      }));
    }
  };
  
  // Save bot (create or update)
  const handleSaveBot = async () => {
    try {
      setLoading(true);
      
      let result;
      
      if (isEditingBot) {
        // Update existing bot
        result = await TradingBotService.updateBot(newBotConfig.id, newBotConfig);
      } else {
        // Create new bot
        result = await TradingBotService.createBot(newBotConfig);
      }
      
      // Refresh bots list
      const userBots = await TradingBotService.getUserBots();
      setBots(userBots || []);
      
      // Select the new/edited bot
      setSelectedBot(result.id);
      
      setIsCreatingBot(false);
      setIsEditingBot(false);
      setTabValue(1); // Switch to details tab
      
    } catch (err) {
      console.error('Failed to save bot:', err);
      setError(`Failed to save bot: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  // Cancel bot creation/editing
  const handleCancelBot = () => {
    setIsCreatingBot(false);
    setIsEditingBot(false);
  };
  
  // Handle bot deletion
  const handleDeleteBot = async (botId) => {
    try {
      setLoading(true);
      
      // Delete the bot
      await TradingBotService.deleteBot(botId);
      
      // Refresh bots list
      const userBots = await TradingBotService.getUserBots();
      setBots(userBots || []);
      
      // Clear selection if the deleted bot was selected
      if (selectedBot === botId) {
        setSelectedBot(null);
      }
      
    } catch (err) {
      console.error(`Failed to delete bot ${botId}:`, err);
      setError(`Failed to delete bot: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  // Start/Stop a bot
  const handleToggleBot = async (botId, currentStatus) => {
    try {
      setLoading(true);
      
      if (currentStatus === 'running') {
        // Stop the bot
        await TradingBotService.stopBot(botId);
      } else {
        // Start the bot
        await TradingBotService.startBot(botId);
      }
      
      // Refresh bots list
      const userBots = await TradingBotService.getUserBots();
      setBots(userBots || []);
      
      // Refresh selected bot details if this was the selected bot
      if (selectedBot === botId) {
        const details = await TradingBotService.getBotDetails(botId);
        setBotDetails(details);
      }
      
    } catch (err) {
      console.error(`Failed to toggle bot ${botId}:`, err);
      setError(`Failed to ${currentStatus === 'running' ? 'stop' : 'start'} bot: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  // Handle backtest config changes
  const handleBacktestConfigChange = (field, value) => {
    setBacktestConfig(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  // Run backtest
  const handleRunBacktest = async () => {
    try {
      setIsBacktesting(true);
      
      // Run the backtest
      const results = await TradingBotService.backtestBot(backtestConfig);
      setBacktestResults(results);
      
    } catch (err) {
      console.error('Failed to run backtest:', err);
      setError(`Failed to run backtest: ${err.message}`);
    } finally {
      setIsBacktesting(false);
    }
  };
  
  // Format currency
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value);
  };
  
  // Format percentage
  const formatPercentage = (value) => {
    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;
  };
  
  // Determine status color
  const getStatusColor = (status) => {
    switch (status) {
      case 'running':
        return theme.palette.success.main;
      case 'paused':
      case 'stopped':
        return theme.palette.warning.main;
      case 'error':
        return theme.palette.error.main;
      default:
        return theme.palette.grey[500];
    }
  };
  
  // Get parameter component for a strategy parameter
  const getParameterComponent = (param, value) => {
    switch (param.type) {
      case 'integer':
      case 'decimal':
        return (
          <TextField
            fullWidth
            label={param.name}
            type="number"
            value={value}
            onChange={(e) => handleParameterChange(param.name, parseFloat(e.target.value))}
            helperText={param.description}
            margin="normal"
            InputProps={{
              inputProps: { 
                step: param.type === 'integer' ? 1 : 0.01,
                min: param.min,
                max: param.max 
              }
            }}
          />
        );
      case 'boolean':
        return (
          <FormControlLabel
            control={
              <Switch 
                checked={Boolean(value)} 
                onChange={(e) => handleParameterChange(param.name, e.target.checked)}
              />
            }
            label={param.name}
          />
        );
      case 'options':
        return (
          <FormControl fullWidth margin="normal">
            <InputLabel>{param.name}</InputLabel>
            <Select
              value={value || ''}
              label={param.name}
              onChange={(e) => handleParameterChange(param.name, e.target.value)}
            >
              {param.options?.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        );
      default:
        return (
          <TextField
            fullWidth
            label={param.name}
            value={value}
            onChange={(e) => handleParameterChange(param.name, e.target.value)}
            helperText={param.description}
            margin="normal"
          />
        );
    }
  };
  
  // Handle parameter change in bot config
  const handleParameterChange = (paramName, value) => {
    setNewBotConfig(prev => ({
      ...prev,
      parameters: {
        ...prev.parameters,
        [paramName]: value
      }
    }));
  };
  
  // Toggle favorite status for a bot
  const toggleFavoriteBot = (botId) => {
    const newFavorites = favoriteBotsIds.includes(botId)
      ? favoriteBotsIds.filter(id => id !== botId)
      : [...favoriteBotsIds, botId];
    
    setFavoriteBotsIds(newFavorites);
    localStorage.setItem('favoriteBots', JSON.stringify(newFavorites));
  };
  
  // Toggle bot comparison selection
  const toggleBotComparison = (bot) => {
    if (comparisonBots.some(b => b.id === bot.id)) {
      setComparisonBots(comparisonBots.filter(b => b.id !== bot.id));
    } else {
      // Limit to comparing max 3 bots at once
      if (comparisonBots.length < 3) {
        setComparisonBots([...comparisonBots, bot]);
      } else {
        setError("You can compare a maximum of 3 bots at once");
      }
    }
  };
  
  // Start/Stop bot comparison mode
  const toggleComparisonMode = async () => {
    if (isComparingBots) {
      setIsComparingBots(false);
      setComparisonBots([]);
    } else {
      setIsComparingBots(true);
    }
  };
  
  // Load comparison data for selected bots
  const loadComparisonData = async () => {
    try {
      setLoading(true);
      
      const comparisonData = await Promise.all(
        comparisonBots.map(async (bot) => {
          const performance = await TradingBotService.getBotPerformance(bot.id, performancePeriod);
          const stats = await TradingBotService.getBotStats(bot.id);
          
          return {
            ...bot,
            performance,
            stats
          };
        })
      );
      
      setComparisonBots(comparisonData);
      
    } catch (err) {
      console.error('Failed to load comparison data:', err);
      setError(`Failed to load comparison data: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  // Toggle portfolio view
  const togglePortfolioView = async () => {
    try {
      setIsViewingPortfolio(!isViewingPortfolio);
      
      if (!isViewingPortfolio && !portfolioPerformance) {
        setLoading(true);
        const portfolio = await TradingBotService.getPortfolioPerformance(performancePeriod);
        setPortfolioPerformance(portfolio);
        setLoading(false);
      }
    } catch (err) {
      console.error('Failed to toggle portfolio view:', err);
      setError(`Failed to load portfolio data: ${err.message}`);
      setIsViewingPortfolio(false);
    }
  };
  
  // Update risk controls for a bot
  const handleRiskControlChange = (control, value) => {
    setNewBotConfig(prev => ({
      ...prev,
      riskControls: {
        ...prev.riskControls,
        [control]: value
      }
    }));
  };
  
  // Filter and sort bots
  const filteredAndSortedBots = useMemo(() => {
    // First filter
    let result = [...bots];
    
    if (botFilterValue === 'favorite') {
      result = result.filter(bot => favoriteBotsIds.includes(bot.id));
    } else if (botFilterValue === 'active') {
      result = result.filter(bot => bot.status === 'running');
    } else if (botFilterValue === 'paused') {
      result = result.filter(bot => bot.status === 'paused' || bot.status === 'stopped');
    } else if (botFilterValue === 'error') {
      result = result.filter(bot => bot.status === 'error');
    }
    
    // Then sort
    return result.sort((a, b) => {
      if (botSortOption === 'performance') {
        return (b.totalProfitLoss || 0) - (a.totalProfitLoss || 0);
      } else if (botSortOption === 'name') {
        return a.name.localeCompare(b.name);
      } else if (botSortOption === 'created') {
        return new Date(b.createdAt) - new Date(a.createdAt);
      } else if (botSortOption === 'activity') {
        return new Date(b.lastTradeAt || 0) - new Date(a.lastTradeAt || 0);
      }
      return 0;
    });
  }, [bots, botFilterValue, botSortOption, favoriteBotsIds]);
  
  // Render active bots tab
  const renderBotsTab = () => {
    if (isViewingPortfolio) {
      return renderPortfolioView();
    }
    
    if (isComparingBots) {
      return renderBotComparison();
    }
    
    if (bots.length === 0) {
      return (
        <Box sx={{ p: 3, textAlign: 'center' }}>
          <Typography variant="body1" color="textSecondary" gutterBottom>
            You don't have any trading bots yet.
          </Typography>
          <Button
            variant="contained"
            color="primary"
            startIcon={<Add />}
            onClick={handleCreateBot}
            sx={{ mt: 2 }}
          >
            Create Your First Bot
          </Button>
        </Box>
      );
    }
    
    return (
      <Box sx={{ p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
          <Box>
            {/* Filter and sort controls */}
            <Stack direction="row" spacing={2} alignItems="center">
              <FormControl size="small" sx={{ minWidth: 120 }}>
                <InputLabel>Filter</InputLabel>
                <Select
                  value={botFilterValue}
                  label="Filter"
                  onChange={(e) => setBotFilterValue(e.target.value)}
                >
                  <MenuItem value="all">All Bots</MenuItem>
                  <MenuItem value="favorite">Favorites</MenuItem>
                  <MenuItem value="active">Active</MenuItem>
                  <MenuItem value="paused">Paused/Stopped</MenuItem>
                  <MenuItem value="error">Error</MenuItem>
                </Select>
              </FormControl>
              
              <FormControl size="small" sx={{ minWidth: 120 }}>
                <InputLabel>Sort By</InputLabel>
                <Select
                  value={botSortOption}
                  label="Sort By"
                  onChange={(e) => setBotSortOption(e.target.value)}
                >
                  <MenuItem value="performance">Performance</MenuItem>
                  <MenuItem value="name">Name</MenuItem>
                  <MenuItem value="created">Newest</MenuItem>
                  <MenuItem value="activity">Recent Activity</MenuItem>
                </Select>
              </FormControl>
            </Stack>
          </Box>
          
          <Box>
            <ButtonGroup variant="outlined" sx={{ mr: 2 }}>
              <Tooltip title="Portfolio Overview">
                <Button 
                  color="primary"
                  startIcon={<Dashboard />}
                  onClick={togglePortfolioView}
                >
                  Portfolio
                </Button>
              </Tooltip>
              <Tooltip title="Compare Bots">
                <Button 
                  color="secondary"
                  startIcon={<CompareArrows />}
                  onClick={toggleComparisonMode}
                >
                  Compare
                </Button>
              </Tooltip>
            </ButtonGroup>
            
            <Button
              variant="contained"
              color="primary"
              startIcon={<Add />}
              onClick={handleCreateBot}
            >
              Create Bot
            </Button>
          </Box>
        </Box>
        
        <Grid container spacing={3}>
          {filteredAndSortedBots.map((bot) => (
            <Grid item xs={12} md={6} lg={4} key={bot.id}>
              <Card 
                variant="outlined" 
                sx={{ 
                  cursor: 'pointer',
                  transition: 'transform 0.2s',
                  '&:hover': { transform: 'translateY(-4px)' },
                  border: selectedBot === bot.id ? `2px solid ${theme.palette.primary.main}` : undefined
                }}
                onClick={() => handleSelectBot(bot.id)}
              >
                <CardHeader
                  title={
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                      <Typography variant="h6" component="div" sx={{ mr: 1 }}>{bot.name}</Typography>
                      <IconButton 
                        size="small" 
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleFavoriteBot(bot.id);
                        }}
                      >
                        {favoriteBotsIds.includes(bot.id) 
                          ? <Favorite fontSize="small" color="warning" /> 
                          : <FavoriteBorder fontSize="small" />}
                      </IconButton>
                    </Box>
                  }
                  subheader={`Strategy: ${bot.strategyName}`}
                  action={
                    <Chip 
                      label={bot.status}
                      size="small"
                      sx={{ 
                        backgroundColor: getStatusColor(bot.status),
                        color: 'white'
                      }}
                    />
                  }
                />
                <CardContent>
                  <Typography variant="body2" color="textSecondary" noWrap>
                    {bot.description}
                  </Typography>
                  
                  <Box sx={{ mt: 2 }}>
                    <Grid container spacing={2}>
                      <Grid item xs={6}>
                        <Typography variant="caption" color="textSecondary">
                          Trading Pair
                        </Typography>
                        <Typography variant="body2" fontWeight="medium">
                          {bot.symbol}
                        </Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" color="textSecondary">
                          Allocation
                        </Typography>
                        <Typography variant="body2" fontWeight="medium">
                          {formatCurrency(bot.allocation)}
                        </Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" color="textSecondary">
                          Profit/Loss
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Typography 
                            variant="body2"
                            fontWeight="medium"
                            color={bot.profitLoss >= 0 ? 'success.main' : 'error.main'}
                          >
                            {formatPercentage(bot.profitLoss)}
                          </Typography>
                          {bot.performanceTrend && (
                            <Box sx={{ ml: 1 }}>
                              <Sparkline 
                                data={bot.performanceTrend || []} 
                                isPositive={bot.profitLoss >= 0} 
                              />
                            </Box>
                          )}
                        </Box>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="caption" color="textSecondary">
                          Win Rate
                        </Typography>
                        <Typography variant="body2" fontWeight="medium">
                          {bot.winRate}% ({bot.totalTrades} trades)
                        </Typography>
                      </Grid>
                    </Grid>
                    
                    {bot.activeTime && (
                      <Box sx={{ mt: 1.5 }}>
                        <LinearProgress 
                          variant="determinate" 
                          value={Math.min((bot.activeTime / (24 * 60 * 60)) * 100, 100)}
                          sx={{ 
                            height: 4,
                            borderRadius: 2,
                          }}
                        />
                        <Typography variant="caption" color="textSecondary" sx={{ display: 'block', textAlign: 'right', fontSize: '0.7rem', mt: 0.5 }}>
                          Active {Math.floor(bot.activeTime / (24 * 60 * 60))} days
                        </Typography>
                      </Box>
                    )}
                    
                    {bot.lastTradeAt && (
                      <Typography variant="caption" color="textSecondary" sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                        <History fontSize="small" sx={{ mr: 0.5, fontSize: '0.9rem' }} />
                        Last trade: {new Date(bot.lastTradeAt).toLocaleString()}
                      </Typography>
                    )}
                    
                    {bot.openPositions && bot.openPositions > 0 && (
                      <Box sx={{ mt: 1 }}>
                        <Chip 
                          icon={<ShowChart />} 
                          label={`${bot.openPositions} Open ${bot.openPositions === 1 ? 'Position' : 'Positions'}`} 
                          size="small"
                          color="primary"
                          variant="outlined"
                        />
                      </Box>
                    )}
                  </Box>
                </CardContent>
                <CardActions>
                  <Tooltip title={bot.status === 'running' ? 'Stop Bot' : 'Start Bot'}>
                    <IconButton 
                      color={bot.status === 'running' ? 'error' : 'success'} 
                      onClick={(e) => {
                        e.stopPropagation(); // Prevent card selection
                        handleToggleBot(bot.id, bot.status);
                      }}
                    >
                      {bot.status === 'running' ? <Stop /> : <PlayArrow />}
                    </IconButton>
                  </Tooltip>
                  
                  <Tooltip title="Edit Bot">
                    <IconButton 
                      color="primary"
                      onClick={(e) => {
                        e.stopPropagation(); // Prevent card selection
                        handleEditBot(bot);
                      }}
                    >
                      <Edit />
                    </IconButton>
                  </Tooltip>
                  
                  <Tooltip title="Delete Bot">
                    <IconButton 
                      color="error"
                      onClick={(e) => {
                        e.stopPropagation(); // Prevent card selection
                        handleDeleteBot(bot.id);
                      }}
                    >
                      <Delete />
                    </IconButton>
                  </Tooltip>
                  
                  <Box sx={{ flexGrow: 1 }} />
                  
                  <Tooltip title="View Details">
                    <IconButton 
                      color="info"
                      onClick={() => handleSelectBot(bot.id)}
                    >
                      <ShowChart />
                    </IconButton>
                  </Tooltip>
                </CardActions>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Box>
    );
  };
  
  // Render bot details tab
  const renderDetailsTab = () => {
    if (!selectedBot) {
      return (
        <Box sx={{ p: 3, textAlign: 'center' }}>
          <Typography variant="body1" color="textSecondary">
            Select a bot to view its details
          </Typography>
        </Box>
      );
    }
    
    if (!botDetails) {
      return (
        <Box sx={{ p: 3, display: 'flex', justifyContent: 'center' }}>
          <CircularProgress />
        </Box>
      );
    }
    
    return (
      <Box sx={{ p: 2 }}>
        <Paper variant="outlined" sx={{ p: 3, mb: 3 }}>
          <Grid container spacing={3}>
            <Grid item xs={12} md={8}>
              <Typography variant="h5" gutterBottom>
                {botDetails.name}
              </Typography>
              <Typography variant="body1" color="textSecondary" paragraph>
                {botDetails.description}
              </Typography>
            </Grid>
            <Grid item xs={12} md={4} sx={{ textAlign: { xs: 'left', md: 'right' } }}>
              <Chip 
                label={botDetails.status}
                size="medium"
                sx={{ 
                  backgroundColor: getStatusColor(botDetails.status),
                  color: 'white',
                  mb: 1
                }}
              />
              <Box sx={{ mt: 2 }}>
                <Button
                  variant="contained"
                  color={botDetails.status === 'running' ? 'error' : 'success'}
                  startIcon={botDetails.status === 'running' ? <Stop /> : <PlayArrow />}
                  onClick={() => handleToggleBot(botDetails.id, botDetails.status)}
                  sx={{ mr: 1 }}
                >
                  {botDetails.status === 'running' ? 'Stop Bot' : 'Start Bot'}
                </Button>
                <Button
                  variant="outlined"
                  color="primary"
                  startIcon={<Edit />}
                  onClick={() => handleEditBot(botDetails)}
                >
                  Edit
                </Button>
              </Box>
            </Grid>
          </Grid>
          
          <Divider sx={{ my: 3 }} />
          
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Card variant="outlined">
                <CardHeader title="Bot Configuration" />
                <CardContent>
                  <TableContainer>
                    <Table size="small">
                      <TableBody>
                        <TableRow>
                          <TableCell component="th" scope="row">Strategy</TableCell>
                          <TableCell>{botDetails.strategyName}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell component="th" scope="row">Trading Pair</TableCell>
                          <TableCell>{botDetails.symbol}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell component="th" scope="row">Allocation</TableCell>
                          <TableCell>{formatCurrency(botDetails.allocation)}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell component="th" scope="row">Risk Level</TableCell>
                          <TableCell>
                            <Chip 
                              label={botDetails.riskLevel} 
                              size="small"
                              color={
                                botDetails.riskLevel === 'low' ? 'success' :
                                botDetails.riskLevel === 'medium' ? 'warning' : 'error'
                              }
                            />
                          </TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell component="th" scope="row">Created</TableCell>
                          <TableCell>{new Date(botDetails.createdAt).toLocaleString()}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell component="th" scope="row">Last Updated</TableCell>
                          <TableCell>{new Date(botDetails.updatedAt).toLocaleString()}</TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Card variant="outlined">
                <CardHeader title="Performance Metrics" />
                <CardContent>
                  <Grid container spacing={2}>
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Total Profit/Loss
                      </Typography>
                      <Typography 
                        variant="h6" 
                        color={botDetails.totalProfitLoss >= 0 ? 'success.main' : 'error.main'}
                      >
                        {formatPercentage(botDetails.totalProfitLoss)}
                      </Typography>
                    </Grid>
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Total Value
                      </Typography>
                      <Typography variant="h6">
                        {formatCurrency(botDetails.totalValue)}
                      </Typography>
                    </Grid>
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Trades
                      </Typography>
                      <Typography variant="h6">
                        {botDetails.totalTrades}
                      </Typography>
                    </Grid>
                    <Grid item xs={6}>
                      <Typography variant="caption" color="textSecondary">
                        Win Rate
                      </Typography>
                      <Typography variant="h6">
                        {botDetails.winRate}%
                      </Typography>
                    </Grid>
                  </Grid>
                  
                  <Box sx={{ mt: 2 }}>
                    <FormControl size="small" sx={{ mb: 1, minWidth: 120 }}>
                      <Select
                        value={performancePeriod}
                        onChange={(e) => setPerformancePeriod(e.target.value)}
                        displayEmpty
                      >
                        <MenuItem value="24h">24 Hours</MenuItem>
                        <MenuItem value="7d">7 Days</MenuItem>
                        <MenuItem value="1m">1 Month</MenuItem>
                        <MenuItem value="3m">3 Months</MenuItem>
                        <MenuItem value="1y">1 Year</MenuItem>
                        <MenuItem value="all">All Time</MenuItem>
                      </Select>
                    </FormControl>
                    
                    {botPerformance && botPerformance.equityCurve && (
                      <ResponsiveContainer width="100%" height={200}>
                        <AreaChart data={botPerformance.equityCurve}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis 
                            dataKey="time" 
                            tick={{ fontSize: 10 }}
                            tickFormatter={(tick) => {
                              const date = new Date(tick);
                              return date.toLocaleDateString();
                            }}
                          />
                          <YAxis 
                            tick={{ fontSize: 10 }}
                            domain={['dataMin', 'dataMax']}
                          />
                          <RechartsTooltip
                            formatter={(value) => formatCurrency(value)}
                            labelFormatter={(label) => new Date(label).toLocaleString()}
                          />
                          <Area 
                            type="monotone" 
                            dataKey="value" 
                            stroke={theme.palette.primary.main} 
                            fill={theme.palette.primary.light} 
                            fillOpacity={0.3}
                          />
                        </AreaChart>
                      </ResponsiveContainer>
                    )}
                  </Box>
                </CardContent>
              </Card>
            </Grid>
            
            <Grid item xs={12}>
              <Card variant="outlined">
                <CardHeader 
                  title="Strategy Parameters" 
                  action={
                    <Tooltip title="Edit Parameters">
                      <IconButton
                        size="small"
                        onClick={() => handleEditBot(botDetails)}
                      >
                        <Edit />
                      </IconButton>
                    </Tooltip>
                  }
                />
                <CardContent>
                  <TableContainer>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Parameter</TableCell>
                          <TableCell>Value</TableCell>
                          <TableCell>Description</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {botDetails.parameters && Object.entries(botDetails.parameters).map(([key, value]) => (
                          <TableRow key={key}>
                            <TableCell component="th" scope="row">
                              {key}
                            </TableCell>
                            <TableCell>
                              {typeof value === 'boolean' ? (value ? 'Yes' : 'No') : value.toString()}
                            </TableCell>
                            <TableCell>
                              {botDetails.parameterDescriptions?.[key] || ''}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Grid>
            
            <Grid item xs={12}>
              <Card variant="outlined">
                <CardHeader title="Recent Trades" />
                <CardContent>
                  {botTradeHistory && botTradeHistory.trades && botTradeHistory.trades.length > 0 ? (
                    <TableContainer sx={{ maxHeight: 300 }}>
                      <Table size="small" stickyHeader>
                        <TableHead>
                          <TableRow>
                            <TableCell>Time</TableCell>
                            <TableCell>Type</TableCell>
                            <TableCell>Price</TableCell>
                            <TableCell>Amount</TableCell>
                            <TableCell>Total</TableCell>
                            <TableCell>Profit/Loss</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {botTradeHistory.trades.map((trade) => (
                            <TableRow key={trade.id}>
                              <TableCell>{new Date(trade.time).toLocaleString()}</TableCell>
                              <TableCell>
                                <Chip 
                                  label={trade.side} 
                                  size="small" 
                                  color={trade.side === 'BUY' ? 'success' : 'error'} 
                                />
                              </TableCell>
                              <TableCell>{trade.price}</TableCell>
                              <TableCell>{trade.amount}</TableCell>
                              <TableCell>{formatCurrency(trade.total)}</TableCell>
                              <TableCell>
                                {trade.profitLoss && (
                                  <Typography 
                                    variant="body2" 
                                    color={trade.profitLoss >= 0 ? 'success.main' : 'error.main'}
                                  >
                                    {formatPercentage(trade.profitLoss)}
                                  </Typography>
                                )}
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  ) : (
                    <Typography variant="body2" color="textSecondary" align="center">
                      No trades recorded yet
                    </Typography>
                  )}
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </Paper>
      </Box>
    );
  };
  
  // Render bot creation/editing form
  const renderBotForm = () => {
    const title = isEditingBot ? 'Edit Bot' : 'Create New Bot';
    
    // Find the current strategy to get its parameters
    const currentStrategy = availableStrategies.find(s => s.id === newBotConfig.strategy);
    
    return (
      <Box sx={{ p: 2 }}>
        <Paper variant="outlined" sx={{ p: 3 }}>
          <Typography variant="h5" gutterBottom>
            {title}
          </Typography>
          
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Bot Name"
                value={newBotConfig.name}
                onChange={(e) => setNewBotConfig(prev => ({ ...prev, name: e.target.value }))}
                margin="normal"
                required
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Bot Description"
                value={newBotConfig.description}
                onChange={(e) => setNewBotConfig(prev => ({ ...prev, description: e.target.value }))}
                margin="normal"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <FormControl fullWidth margin="normal" required>
                <InputLabel>Strategy</InputLabel>
                <Select
                  value={newBotConfig.strategy}
                  label="Strategy"
                  onChange={(e) => handleStrategyChange(e.target.value)}
                >
                  {availableStrategies.map((strategy) => (
                    <MenuItem key={strategy.id} value={strategy.id}>
                      {strategy.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <FormControl fullWidth margin="normal" required>
                <InputLabel>Trading Pair</InputLabel>
                <Select
                  value={newBotConfig.symbol}
                  label="Trading Pair"
                  onChange={(e) => setNewBotConfig(prev => ({ ...prev, symbol: e.target.value }))}
                >
                  {availablePairs.map((pair) => (
                    <MenuItem key={pair.symbol} value={pair.symbol}>
                      {pair.symbol} - {pair.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Allocation (USD)"
                type="number"
                value={newBotConfig.allocation}
                onChange={(e) => setNewBotConfig(prev => ({ ...prev, allocation: Number(e.target.value) }))}
                margin="normal"
                InputProps={{
                  inputProps: { min: 10 },
                  startAdornment: <InputAdornment position="start">$</InputAdornment>
                }}
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <FormControl fullWidth margin="normal">
                <InputLabel>Risk Level</InputLabel>
                <Select
                  value={newBotConfig.riskLevel}
                  label="Risk Level"
                  onChange={(e) => setNewBotConfig(prev => ({ ...prev, riskLevel: e.target.value }))}
                >
                  <MenuItem value="low">Low</MenuItem>
                  <MenuItem value="medium">Medium</MenuItem>
                  <MenuItem value="high">High</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom>
                Strategy Parameters
              </Typography>
              
              {currentStrategy && currentStrategy.parameters && (
                <Grid container spacing={2}>
                  {currentStrategy.parameters.map((param) => (
                    <Grid item xs={12} md={6} key={param.name}>
                      {getParameterComponent(param, newBotConfig.parameters[param.name])}
                    </Grid>
                  ))}
                </Grid>
              )}
            </Grid>
            
            <Grid item xs={12}>
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMore />}>
                  <Typography variant="subtitle1" sx={{ display: 'flex', alignItems: 'center' }}>
                    <Security sx={{ mr: 1 }} /> Risk Management Controls
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={2}>
                    <Grid item xs={12} md={6}>
                      <TextField
                        fullWidth
                        label="Maximum Drawdown (%)"
                        type="number"
                        value={newBotConfig.riskControls.maxDrawdown}
                        onChange={(e) => handleRiskControlChange('maxDrawdown', Number(e.target.value))}
                        margin="normal"
                        helperText="Bot will stop trading if drawdown exceeds this threshold"
                        InputProps={{
                          inputProps: { min: 1, max: 100 },
                          endAdornment: <InputAdornment position="end">%</InputAdornment>
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <TextField
                        fullWidth
                        label="Stop Loss (%)"
                        type="number"
                        value={newBotConfig.riskControls.stopLoss}
                        onChange={(e) => handleRiskControlChange('stopLoss', Number(e.target.value))}
                        margin="normal"
                        helperText="Close position if loss exceeds this percentage"
                        InputProps={{
                          inputProps: { min: 0.1, max: 100, step: 0.1 },
                          endAdornment: <InputAdornment position="end">%</InputAdornment>
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <TextField
                        fullWidth
                        label="Take Profit (%)"
                        type="number"
                        value={newBotConfig.riskControls.takeProfit}
                        onChange={(e) => handleRiskControlChange('takeProfit', Number(e.target.value))}
                        margin="normal"
                        helperText="Close position when profit reaches this percentage"
                        InputProps={{
                          inputProps: { min: 0.1, max: 1000, step: 0.1 },
                          endAdornment: <InputAdornment position="end">%</InputAdornment>
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <FormControlLabel
                        control={
                          <Switch 
                            checked={newBotConfig.riskControls.trailingStop} 
                            onChange={(e) => handleRiskControlChange('trailingStop', e.target.checked)}
                          />
                        }
                        label="Use Trailing Stop Loss"
                      />
                      {newBotConfig.riskControls.trailingStop && (
                        <TextField
                          fullWidth
                          label="Trailing Stop (%)"
                          type="number"
                          value={newBotConfig.riskControls.trailingStopPercent}
                          onChange={(e) => handleRiskControlChange('trailingStopPercent', Number(e.target.value))}
                          margin="normal"
                          helperText="Distance between current price and stop loss"
                          InputProps={{
                            inputProps: { min: 0.1, max: 100, step: 0.1 },
                            endAdornment: <InputAdornment position="end">%</InputAdornment>
                          }}
                        />
                      )}
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <TextField
                        fullWidth
                        label="Maximum Daily Trades"
                        type="number"
                        value={newBotConfig.riskControls.maxDailyTrades}
                        onChange={(e) => handleRiskControlChange('maxDailyTrades', Number(e.target.value))}
                        margin="normal"
                        helperText="Limit the number of trades per day"
                        InputProps={{
                          inputProps: { min: 1, max: 1000 }
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <TextField
                        fullWidth
                        label="Maximum Open Trades"
                        type="number"
                        value={newBotConfig.riskControls.maxOpenTrades}
                        onChange={(e) => handleRiskControlChange('maxOpenTrades', Number(e.target.value))}
                        margin="normal"
                        helperText="Maximum number of simultaneous open positions"
                        InputProps={{
                          inputProps: { min: 1, max: 100 }
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <TextField
                        fullWidth
                        label="Maximum Daily Loss (%)"
                        type="number"
                        value={newBotConfig.riskControls.maxDailyLoss}
                        onChange={(e) => handleRiskControlChange('maxDailyLoss', Number(e.target.value))}
                        margin="normal"
                        helperText="Stop trading if daily loss exceeds this percentage"
                        InputProps={{
                          inputProps: { min: 0.1, max: 100, step: 0.1 },
                          endAdornment: <InputAdornment position="end">%</InputAdornment>
                        }}
                      />
                    </Grid>
                  </Grid>
                </AccordionDetails>
              </Accordion>
            </Grid>
            
            <Grid item xs={12}>
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMore />}>
                  <Typography variant="subtitle1" sx={{ display: 'flex', alignItems: 'center' }}>
                    <NotificationsActive sx={{ mr: 1 }} /> Alerts & Notifications
                  </Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={2}>
                    <Grid item xs={12} md={6}>
                      <FormControlLabel
                        control={
                          <Switch 
                            checked={alertsConfig.profitTarget} 
                            onChange={(e) => setAlertsConfig(prev => ({ ...prev, profitTarget: e.target.checked }))}
                          />
                        }
                        label="Profit Target Alert"
                      />
                      {alertsConfig.profitTarget && (
                        <TextField
                          fullWidth
                          label="Profit Target (%)"
                          type="number"
                          value={alertsConfig.profitValue}
                          onChange={(e) => setAlertsConfig(prev => ({ ...prev, profitValue: Number(e.target.value) }))}
                          margin="normal"
                          helperText="Notify when profit reaches this percentage"
                          InputProps={{
                            inputProps: { min: 0.1, max: 1000, step: 0.1 },
                            endAdornment: <InputAdornment position="end">%</InputAdornment>
                          }}
                        />
                      )}
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <FormControlLabel
                        control={
                          <Switch 
                            checked={alertsConfig.lossLimit} 
                            onChange={(e) => setAlertsConfig(prev => ({ ...prev, lossLimit: e.target.checked }))}
                          />
                        }
                        label="Loss Limit Alert"
                      />
                      {alertsConfig.lossLimit && (
                        <TextField
                          fullWidth
                          label="Loss Limit (%)"
                          type="number"
                          value={alertsConfig.lossValue}
                          onChange={(e) => setAlertsConfig(prev => ({ ...prev, lossValue: Number(e.target.value) }))}
                          margin="normal"
                          helperText="Notify when loss exceeds this percentage"
                          InputProps={{
                            inputProps: { min: 0.1, max: 100, step: 0.1 },
                            endAdornment: <InputAdornment position="end">%</InputAdornment>
                          }}
                        />
                      )}
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <FormControlLabel
                        control={
                          <Switch 
                            checked={alertsConfig.tradingVolumeAlert} 
                            onChange={(e) => setAlertsConfig(prev => ({ ...prev, tradingVolumeAlert: e.target.checked }))}
                          />
                        }
                        label="Trading Volume Alert"
                      />
                      {alertsConfig.tradingVolumeAlert && (
                        <TextField
                          fullWidth
                          label="Trading Volume Threshold (USD)"
                          type="number"
                          value={alertsConfig.tradingVolumeValue}
                          onChange={(e) => setAlertsConfig(prev => ({ ...prev, tradingVolumeValue: Number(e.target.value) }))}
                          margin="normal"
                          helperText="Notify when trading volume exceeds this amount"
                          InputProps={{
                            inputProps: { min: 100, step: 100 },
                            startAdornment: <InputAdornment position="start">$</InputAdornment>
                          }}
                        />
                      )}
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <FormControlLabel
                        control={
                          <Switch 
                            checked={alertsConfig.botErrorNotification} 
                            onChange={(e) => setAlertsConfig(prev => ({ ...prev, botErrorNotification: e.target.checked }))}
                          />
                        }
                        label="Bot Error Notifications"
                      />
                      <Typography variant="caption" color="textSecondary" display="block">
                        Receive notifications when the bot encounters errors
                      </Typography>
                    </Grid>
                  </Grid>
                </AccordionDetails>
              </Accordion>
            </Grid>
            
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Switch 
                    checked={newBotConfig.enabled} 
                    onChange={(e) => setNewBotConfig(prev => ({ ...prev, enabled: e.target.checked }))}
                  />
                }
                label="Enable bot after saving"
              />
            </Grid>
            
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
                <Button
                  variant="outlined"
                  color="inherit"
                  onClick={handleCancelBot}
                  sx={{ mr: 2 }}
                >
                  Cancel
                </Button>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleSaveBot}
                  disabled={!newBotConfig.name || !newBotConfig.strategy || !newBotConfig.symbol}
                >
                  Save Bot
                </Button>
              </Box>
            </Grid>
          </Grid>
        </Paper>
      </Box>
    );
  };
  
  // Render backtesting tab
  const renderBacktestTab = () => {
    return (
      <Box sx={{ p: 2 }}>
        <Paper variant="outlined" sx={{ p: 3 }}>
          <Typography variant="h5" gutterBottom>
            Bot Strategy Backtesting
          </Typography>
          
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth margin="normal" required>
                <InputLabel>Strategy</InputLabel>
                <Select
                  value={backtestConfig.strategy}
                  label="Strategy"
                  onChange={(e) => handleBacktestConfigChange('strategy', e.target.value)}
                >
                  {availableStrategies.map((strategy) => (
                    <MenuItem key={strategy.id} value={strategy.id}>
                      {strategy.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <FormControl fullWidth margin="normal" required>
                <InputLabel>Trading Pair</InputLabel>
                <Select
                  value={backtestConfig.symbol}
                  label="Trading Pair"
                  onChange={(e) => handleBacktestConfigChange('symbol', e.target.value)}
                >
                  {availablePairs.map((pair) => (
                    <MenuItem key={pair.symbol} value={pair.symbol}>
                      {pair.symbol} - {pair.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Start Date"
                type="date"
                value={backtestConfig.startDate}
                onChange={(e) => handleBacktestConfigChange('startDate', e.target.value)}
                margin="normal"
                InputLabelProps={{ shrink: true }}
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="End Date"
                type="date"
                value={backtestConfig.endDate}
                onChange={(e) => handleBacktestConfigChange('endDate', e.target.value)}
                margin="normal"
                InputLabelProps={{ shrink: true }}
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Initial Capital (USD)"
                type="number"
                value={backtestConfig.initialCapital}
                onChange={(e) => handleBacktestConfigChange('initialCapital', Number(e.target.value))}
                margin="normal"
                InputProps={{
                  inputProps: { min: 100 },
                  startAdornment: <InputAdornment position="start">$</InputAdornment>
                }}
              />
            </Grid>
            
            {/* Strategy Parameters (similar to bot creation form) */}
            <Grid item xs={12}>
              <Box sx={{ mt: 2, mb: 2, display: 'flex', justifyContent: 'flex-end' }}>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleRunBacktest}
                  disabled={isBacktesting || !backtestConfig.strategy || !backtestConfig.symbol || !backtestConfig.startDate || !backtestConfig.endDate}
                  startIcon={isBacktesting ? <CircularProgress size={20} color="inherit" /> : <Assessment />}
                >
                  {isBacktesting ? 'Running...' : 'Run Backtest'}
                </Button>
              </Box>
            </Grid>
          </Grid>
          
          {/* Backtest Results */}
          {backtestResults && (
            <>
              <Divider sx={{ my: 3 }} />
              
              <Typography variant="h6" gutterBottom>
                Backtest Results
              </Typography>
              
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Card variant="outlined">
                    <CardHeader title="Performance Summary" />
                    <CardContent>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="textSecondary">
                            Net Profit/Loss
                          </Typography>
                          <Typography 
                            variant="h6" 
                            color={backtestResults.summary.netProfitPercentage >= 0 ? 'success.main' : 'error.main'}
                          >
                            {formatPercentage(backtestResults.summary.netProfitPercentage)}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="textSecondary">
                            Final Capital
                          </Typography>
                          <Typography variant="h6">
                            {formatCurrency(backtestResults.summary.finalCapital)}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="textSecondary">
                            Total Trades
                          </Typography>
                          <Typography variant="h6">
                            {backtestResults.summary.totalTrades}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="textSecondary">
                            Win Rate
                          </Typography>
                          <Typography variant="h6">
                            {backtestResults.summary.winRate}%
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="textSecondary">
                            Profit Factor
                          </Typography>
                          <Typography variant="h6">
                            {backtestResults.summary.profitFactor.toFixed(2)}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="textSecondary">
                            Max Drawdown
                          </Typography>
                          <Typography variant="h6" color="error.main">
                            {formatPercentage(-Math.abs(backtestResults.summary.maxDrawdown))}
                          </Typography>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Card variant="outlined" sx={{ height: '100%' }}>
                    <CardHeader title="Equity Curve" />
                    <CardContent>
                      {backtestResults.equity && backtestResults.equity.length > 0 && (
                        <ResponsiveContainer width="100%" height={200}>
                          <AreaChart data={backtestResults.equity}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis 
                              dataKey="time" 
                              tick={{ fontSize: 10 }}
                              tickFormatter={(tick) => {
                                const date = new Date(tick);
                                return date.toLocaleDateString();
                              }}
                            />
                            <YAxis 
                              tick={{ fontSize: 10 }}
                              domain={['dataMin', 'dataMax']}
                            />
                            <RechartsTooltip
                              formatter={(value) => formatCurrency(value)}
                              labelFormatter={(label) => new Date(label).toLocaleString()}
                            />
                            <Area 
                              type="monotone" 
                              dataKey="value" 
                              stroke={theme.palette.primary.main} 
                              fill={theme.palette.primary.light} 
                              fillOpacity={0.3}
                            />
                          </AreaChart>
                        </ResponsiveContainer>
                      )}
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12}>
                  <Card variant="outlined">
                    <CardHeader title="Trade List" />
                    <CardContent>
                      <TableContainer sx={{ maxHeight: 300 }}>
                        <Table size="small" stickyHeader>
                          <TableHead>
                            <TableRow>
                              <TableCell>Time</TableCell>
                              <TableCell>Type</TableCell>
                              <TableCell>Price</TableCell>
                              <TableCell>Amount</TableCell>
                              <TableCell>Total</TableCell>
                              <TableCell>Profit/Loss</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {backtestResults.trades && backtestResults.trades.map((trade, index) => (
                              <TableRow key={index}>
                                <TableCell>{new Date(trade.time).toLocaleString()}</TableCell>
                                <TableCell>
                                  <Chip 
                                    label={trade.side} 
                                    size="small" 
                                    color={trade.side === 'BUY' ? 'success' : 'error'} 
                                  />
                                </TableCell>
                                <TableCell>{trade.price}</TableCell>
                                <TableCell>{trade.amount}</TableCell>
                                <TableCell>{formatCurrency(trade.total)}</TableCell>
                                <TableCell>
                                  {trade.profitLoss && (
                                    <Typography 
                                      variant="body2" 
                                      color={trade.profitLoss >= 0 ? 'success.main' : 'error.main'}
                                    >
                                      {formatPercentage(trade.profitLoss)}
                                    </Typography>
                                  )}
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12}>
                  <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
                    <Button
                      variant="contained"
                      color="primary"
                      onClick={() => {
                        // Create a bot with these settings
                        setNewBotConfig({
                          name: `${backtestConfig.strategy} Bot for ${backtestConfig.symbol}`,
                          description: `Created from successful backtest on ${new Date().toLocaleDateString()}`,
                          strategy: backtestConfig.strategy,
                          symbol: backtestConfig.symbol,
                          allocation: backtestConfig.initialCapital,
                          riskLevel: 'medium',
                          parameters: { ...backtestConfig.parameters },
                          enabled: false
                        });
                        
                        setIsCreatingBot(true);
                        setIsEditingBot(false);
                        setTabValue(0); // Switch to bots tab
                      }}
                      startIcon={<Add />}
                    >
                      Create Bot from Backtest
                    </Button>
                  </Box>
                </Grid>
              </Grid>
            </>
          )}
        </Paper>
      </Box>
    );
  };
  
  // Render portfolio management tab - Removed useEffect hook that was incorrectly placed inside
  const renderPortfolioTab = () => {
    return renderPortfolioView();
  };
  
  // Render portfolio view
  const renderPortfolioView = () => {
    if (!portfolioPerformance) {
      return (
        <Box sx={{ p: 3, textAlign: 'center' }}>
          <CircularProgress />
        </Box>
      );
    }
    
    return (
      <Box sx={{ p: 2 }}>
        <Grid container spacing={3}>
          {/* Portfolio Summary Card */}
          <Grid item xs={12}>
            <Card variant="outlined">
              <CardHeader 
                title="Portfolio Summary" 
                action={
                  <Button
                    variant="text"
                    color="primary"
                    startIcon={<Dashboard />}
                    onClick={togglePortfolioView}
                  >
                    Back to Bots
                  </Button>
                }
              />
              <CardContent>
                <Grid container spacing={3}>
                  {/* Portfolio Stats */}
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined">
                      <CardContent>
                        <Grid container spacing={2}>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="textSecondary">
                              Total Value
                            </Typography>
                            <Typography variant="h5">
                              {formatCurrency(portfolioPerformance.totalValue)}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="textSecondary">
                              Total P/L
                            </Typography>
                            <Typography 
                              variant="h5" 
                              color={portfolioPerformance.totalProfitLoss >= 0 ? 'success.main' : 'error.main'}
                            >
                              {formatPercentage(portfolioPerformance.totalProfitLoss)}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="textSecondary">
                              Active Bots
                            </Typography>
                            <Typography variant="h6">
                              {portfolioPerformance.activeBots}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="textSecondary">
                              Open Positions
                            </Typography>
                            <Typography variant="h6">
                              {portfolioPerformance.openPositions}
                            </Typography>
                          </Grid>
                        </Grid>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  {/* Portfolio Risk Metrics */}
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined">
                      <CardContent>
                        <Typography variant="subtitle2" gutterBottom>
                          Risk Metrics
                        </Typography>
                        <Grid container spacing={2}>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="textSecondary">
                              Max Drawdown
                            </Typography>
                            <Typography variant="h6" color="error.main">
                              {portfolioPerformance.maxDrawdown}%
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="textSecondary">
                              Sharpe Ratio
                            </Typography>
                            <Typography 
                              variant="h6"
                              color={portfolioPerformance.sharpeRatio >= 1 ? 'success.main' : 'warning.main'}
                            >
                              {portfolioPerformance.sharpeRatio.toFixed(2)}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="textSecondary">
                              Win Rate
                            </Typography>
                            <Typography variant="h6">
                              {portfolioPerformance.winRate}%
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="textSecondary">
                              Volatility
                            </Typography>
                            <Typography variant="h6">
                              {portfolioPerformance.volatility}%
                            </Typography>
                          </Grid>
                        </Grid>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  {/* Portfolio Allocation */}
                  <Grid item xs={12} md={4}>
                    <Card variant="outlined">
                      <CardContent>
                        <Typography variant="subtitle2" gutterBottom>
                          Asset Allocation
                        </Typography>
                        <ResponsiveContainer width="100%" height={180}>
                          <PieChart>
                            <Pie
                              data={portfolioPerformance.allocation}
                              nameKey="asset"
                              dataKey="value"
                              cx="50%"
                              cy="50%"
                              outerRadius={60}
                              fill={theme.palette.primary.main}
                              label={({name, percent}) => `${name} ${(percent * 100).toFixed(0)}%`}
                            >
                              {portfolioPerformance.allocation.map((entry, index) => (
                                <Cell 
                                  key={`cell-${index}`} 
                                  fill={[
                                    theme.palette.primary.main,
                                    theme.palette.secondary.main,
                                    theme.palette.success.main,
                                    theme.palette.warning.main,
                                    theme.palette.error.main,
                                    theme.palette.info.main
                                  ][index % 6]} 
                                />
                              ))}
                            </Pie>
                            <Legend />
                            <RechartsTooltip 
                              formatter={(value) => formatCurrency(value)}
                            />
                          </PieChart>
                        </ResponsiveContainer>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  {/* Portfolio Performance Chart */}
                  <Grid item xs={12}>
                    <Card variant="outlined">
                      <CardContent>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                          <Typography variant="subtitle1">Performance History</Typography>
                          <FormControl size="small" sx={{ minWidth: 120 }}>
                            <Select
                              value={performancePeriod}
                              onChange={(e) => setPerformancePeriod(e.target.value)}
                              displayEmpty
                            >
                              <MenuItem value="24h">24 Hours</MenuItem>
                              <MenuItem value="7d">7 Days</MenuItem>
                              <MenuItem value="1m">1 Month</MenuItem>
                              <MenuItem value="3m">3 Months</MenuItem>
                              <MenuItem value="1y">1 Year</MenuItem>
                              <MenuItem value="all">All Time</MenuItem>
                            </Select>
                          </FormControl>
                        </Box>
                        
                        <ResponsiveContainer width="100%" height={300}>
                          <ComposedChart data={portfolioPerformance.equityCurve}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis 
                              dataKey="time" 
                              tick={{ fontSize: 10 }}
                              tickFormatter={(tick) => {
                                const date = new Date(tick);
                                return date.toLocaleDateString();
                              }}
                            />
                            <YAxis 
                              yAxisId="left"
                              tick={{ fontSize: 10 }}
                              domain={['dataMin', 'dataMax']}
                            />
                            <YAxis 
                              yAxisId="right"
                              orientation="right"
                              tick={{ fontSize: 10 }}
                            />
                            <RechartsTooltip
                              formatter={(value, name) => {
                                if (name === 'value') return formatCurrency(value);
                                if (name === 'trades') return `${value} trades`;
                                return value;
                              }}
                              labelFormatter={(label) => new Date(label).toLocaleString()}
                            />
                            <Legend />
                            <Area 
                              yAxisId="left"
                              type="monotone" 
                              dataKey="value" 
                              name="Portfolio Value"
                              stroke={theme.palette.primary.main} 
                              fill={theme.palette.primary.light} 
                              fillOpacity={0.3}
                            />
                            <Bar 
                              yAxisId="right"
                              dataKey="trades" 
                              name="Daily Trades"
                              barSize={20} 
                              fill={theme.palette.secondary.main} 
                              fillOpacity={0.5} 
                            />
                            <Line 
                              yAxisId="left"
                              type="monotone" 
                              dataKey="benchmark" 
                              name="Market Benchmark"
                              stroke={theme.palette.warning.main} 
                              dot={false}
                              strokeDasharray="5 5"
                            />
                          </ComposedChart>
                        </ResponsiveContainer>
                      </CardContent>
                    </Card>
                  </Grid>
                  
                  {/* Bot Performance Comparison Table */}
                  <Grid item xs={12}>
                    <Card variant="outlined">
                      <CardHeader title="Bot Performance Rankings" />
                      <CardContent>
                        <TableContainer>
                          <Table size="small">
                            <TableHead>
                              <TableRow>
                                <TableCell>Bot Name</TableCell>
                                <TableCell>Strategy</TableCell>
                                <TableCell>Asset</TableCell>
                                <TableCell align="right">P/L</TableCell>
                                <TableCell align="right">Win Rate</TableCell>
                                <TableCell align="right">Trades</TableCell>
                                <TableCell align="right">Allocation</TableCell>
                                <TableCell align="right">Status</TableCell>
                                <TableCell>Actions</TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {portfolioPerformance.botRankings.map((bot) => (
                                <TableRow 
                                  key={bot.id}
                                  hover
                                  onClick={() => handleSelectBot(bot.id)}
                                  sx={{ cursor: 'pointer' }}
                                >
                                  <TableCell>
                                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                      {bot.name}
                                      {favoriteBotsIds.includes(bot.id) && (
                                        <Favorite fontSize="small" color="warning" sx={{ ml: 1 }} />
                                      )}
                                    </Box>
                                  </TableCell>
                                  <TableCell>{bot.strategyName}</TableCell>
                                  <TableCell>{bot.symbol}</TableCell>
                                  <TableCell 
                                    align="right"
                                    sx={{
                                      color: bot.profitLoss >= 0 ? 'success.main' : 'error.main'
                                    }}
                                  >
                                    {formatPercentage(bot.profitLoss)}
                                  </TableCell>
                                  <TableCell align="right">{bot.winRate}%</TableCell>
                                  <TableCell align="right">{bot.trades}</TableCell>
                                  <TableCell align="right">{formatCurrency(bot.allocation)}</TableCell>
                                  <TableCell align="right">
                                    <Chip 
                                      label={bot.status}
                                      size="small"
                                      sx={{ 
                                        backgroundColor: getStatusColor(bot.status),
                                        color: 'white'
                                      }}
                                    />
                                  </TableCell>
                                  <TableCell>
                                    <IconButton
                                      size="small"
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        handleSelectBot(bot.id);
                                      }}
                                    >
                                      <Visibility fontSize="small" />
                                    </IconButton>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </TableContainer>
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Box>
    );
  };
  
  // Render bot comparison
  const renderBotComparison = () => {
    if (comparisonBots.length === 0) {
      return (
        <Box sx={{ p: 3, textAlign: 'center' }}>
          <Typography variant="body1" gutterBottom>
            Select up to 3 bots to compare their performance
          </Typography>
          <Button
            variant="contained"
            color="primary"
            startIcon={<Dashboard />}
            onClick={toggleComparisonMode}
            sx={{ mt: 2 }}
          >
            Back to Bots
          </Button>
        </Box>
      );
    }
    
    return (
      <Box sx={{ p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
          <Typography variant="h6">
            Bot Performance Comparison
          </Typography>
          <Box>
            <Button
              variant="outlined"
              color="primary"
              startIcon={<Refresh />}
              onClick={loadComparisonData}
              sx={{ mr: 1 }}
            >
              Refresh Data
            </Button>
            <Button
              variant="outlined"
              color="secondary"
              startIcon={<Dashboard />}
              onClick={toggleComparisonMode}
            >
              Back to Bots
            </Button>
          </Box>
        </Box>
        
        <Grid container spacing={3}>
          {/* Performance Chart */}
          <Grid item xs={12}>
            <Card variant="outlined">
              <CardHeader title="Performance Comparison" />
              <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                  <ToggleButtonGroup
                    value={chartType}
                    exclusive
                    onChange={(e, newValue) => newValue && setChartType(newValue)}
                    size="small"
                  >
                    <ToggleButton value="line">Line</ToggleButton>
                    <ToggleButton value="area">Area</ToggleButton>
                    <ToggleButton value="bar">Bar</ToggleButton>
                  </ToggleButtonGroup>
                  
                  <FormControl size="small">
                    <Select
                      value={performancePeriod}
                      onChange={(e) => setPerformancePeriod(e.target.value)}
                      displayEmpty
                      sx={{ minWidth: 120 }}
                    >
                      <MenuItem value="24h">24 Hours</MenuItem>
                      <MenuItem value="7d">7 Days</MenuItem>
                      <MenuItem value="1m">1 Month</MenuItem>
                      <MenuItem value="3m">3 Months</MenuItem>
                      <MenuItem value="1y">1 Year</MenuItem>
                      <MenuItem value="all">All Time</MenuItem>
                    </Select>
                  </FormControl>
                </Box>
                
                <ResponsiveContainer width="100%" height={400}>
                  {chartType === 'area' ? (
                    <ComposedChart>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis 
                        dataKey="time" 
                        tick={{ fontSize: 10 }}
                        tickFormatter={(tick) => {
                          const date = new Date(tick);
                          return date.toLocaleDateString();
                        }}
                      />
                      <YAxis 
                        tick={{ fontSize: 10 }}
                        domain={['dataMin', 'dataMax']}
                        allowDecimals={false}
                      />
                      <RechartsTooltip
                        formatter={(value, name) => {
                          return [`${formatPercentage(value)}`, name];
                        }}
                        labelFormatter={(label) => new Date(label).toLocaleString()}
                      />
                      <Legend />
                      {comparisonBots.map((bot, index) => (
                        <Area 
                          key={bot.id}
                          type="monotone" 
                          name={bot.name}
                          data={bot.performance?.equityCurve || []}
                          dataKey="value" 
                          stroke={[
                            theme.palette.primary.main,
                            theme.palette.secondary.main,
                            theme.palette.success.main
                          ][index % 3]} 
                          fill={[
                            theme.palette.primary.light,
                            theme.palette.secondary.light,
                            theme.palette.success.light
                          ][index % 3]} 
                          fillOpacity={0.3}
                          connectNulls
                        />
                      ))}
                      <Brush dataKey="time" height={30} stroke={theme.palette.primary.main} />
                    </ComposedChart>
                  ) : chartType === 'line' ? (
                    <LineChart>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis 
                        dataKey="time" 
                        tick={{ fontSize: 10 }}
                        tickFormatter={(tick) => {
                          const date = new Date(tick);
                          return date.toLocaleDateString();
                        }}
                      />
                      <YAxis 
                        tick={{ fontSize: 10 }}
                        domain={['dataMin', 'dataMax']}
                        allowDecimals={false}
                      />
                      <RechartsTooltip
                        formatter={(value, name) => {
                          return [`${formatPercentage(value)}`, name];
                        }}
                        labelFormatter={(label) => new Date(label).toLocaleString()}
                      />
                      <Legend />
                      {comparisonBots.map((bot, index) => (
                        <Line 
                          key={bot.id}
                          type="monotone" 
                          name={bot.name}
                          data={bot.performance?.equityCurve || []}
                          dataKey="value" 
                          stroke={[
                            theme.palette.primary.main,
                            theme.palette.secondary.main,
                            theme.palette.success.main
                          ][index % 3]}
                          strokeWidth={2}
                          dot={false}
                          activeDot={{ r: 5 }}
                          connectNulls
                        />
                      ))}
                      <Brush dataKey="time" height={30} stroke={theme.palette.primary.main} />
                    </LineChart>
                  ) : (
                    <BarChart>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis
                        dataKey="time"
                        tick={{ fontSize: 10 }}
                        tickFormatter={(tick) => {
                          const date = new Date(tick);
                          return date.toLocaleDateString();
                        }}
                      />
                      <YAxis
                        tick={{ fontSize: 10 }}
                        domain={['dataMin', 'dataMax']}
                        allowDecimals={false}
                      />
                      <RechartsTooltip
                        formatter={(value, name) => {
                          return [`${formatPercentage(value)}`, name];
                        }}
                        labelFormatter={(label) => new Date(label).toLocaleString()}
                      />
                      <Legend />
                      {comparisonBots.map((bot, index) => (
                        <Bar
                          key={bot.id}
                          name={bot.name}
                          data={bot.performance?.equityCurve || []}
                          dataKey="value"
                          fill={[
                            theme.palette.primary.main,
                            theme.palette.secondary.main,
                            theme.palette.success.main
                          ][index % 3]}
                          fillOpacity={0.6}
                        />
                      ))}
                      <Brush dataKey="time" height={30} stroke={theme.palette.primary.main} />
                    </BarChart>
                  )}
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </Grid>
          
          {/* Performance Metrics Comparison */}
          <Grid item xs={12}>
            <Card variant="outlined">
              <CardHeader title="Performance Metrics" />
              <CardContent>
                <TableContainer>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>Metric</TableCell>
                        {comparisonBots.map(bot => (
                          <TableCell key={bot.id}>{bot.name}</TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow>
                        <TableCell>Profit/Loss</TableCell>
                        {comparisonBots.map(bot => (
                          <TableCell 
                            key={bot.id}
                            sx={{
                              color: bot.stats?.totalProfitLoss >= 0 ? 'success.main' : 'error.main'
                            }}
                          >
                            {formatPercentage(bot.stats?.totalProfitLoss || 0)}
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Win Rate</TableCell>
                        {comparisonBots.map(bot => (
                          <TableCell key={bot.id}>
                            {bot.stats?.winRate}%
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Trades Count</TableCell>
                        {comparisonBots.map(bot => (
                          <TableCell key={bot.id}>
                            {bot.stats?.totalTrades}
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Avg. Profit per Trade</TableCell>
                        {comparisonBots.map(bot => (
                          <TableCell 
                            key={bot.id}
                            sx={{
                              color: bot.stats?.avgProfit >= 0 ? 'success.main' : 'error.main'
                            }}
                          >
                            {formatPercentage(bot.stats?.avgProfit || 0)}
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Max Drawdown</TableCell>
                        {comparisonBots.map(bot => (
                          <TableCell 
                            key={bot.id}
                            sx={{
                              color: 'error.main'
                            }}
                          >
                            {bot.stats?.maxDrawdown}%
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Sharpe Ratio</TableCell>
                        {comparisonBots.map(bot => (
                          <TableCell 
                            key={bot.id}
                            sx={{
                              color: (bot.stats?.sharpeRatio || 0) >= 1 ? 'success.main' : 'warning.main'
                            }}
                          >
                            {(bot.stats?.sharpeRatio || 0).toFixed(2)}
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Consistency Score</TableCell>
                        {comparisonBots.map(bot => (
                          <TableCell key={bot.id}>
                            {bot.stats?.consistencyScore}/10
                          </TableCell>
                        ))}
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Box>
    );
  };
  
  // Get AI strategy suggestions based on market conditions
  const fetchAiStrategySuggestions = async () => {
    try {
      setAiSuggestionsLoading(true);
      const suggestions = await TradingBotService.getAiStrategyRecommendations(marketConditionData);
      setAiStrategySuggestions(suggestions);
    } catch (err) {
      console.error('Failed to get AI strategy suggestions:', err);
    } finally {
      setAiSuggestionsLoading(false);
    }
  };
  
  // Apply an AI suggested strategy to create a new bot
  const applyAiSuggestedStrategy = (suggestion) => {
    setNewBotConfig({
      ...newBotConfig,
      name: `AI ${suggestion.strategy} Bot`,
      description: suggestion.description,
      strategy: suggestion.strategy,
      symbol: suggestion.recommendedPair || 'BTCUSDT',
      parameters: suggestion.parameters,
      riskLevel: suggestion.riskLevel || 'medium',
      allocation: suggestion.recommendedAllocation || 10
    });
    setIsAiSuggestionsOpen(false);
    setIsCreatingBot(true);
  };
  
  // Handle market condition input changes
  const handleMarketConditionChange = (event) => {
    const { name, value } = event.target;
    setMarketConditionData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // AI Strategy Suggestions Dialog Component
  const renderAiStrategyDialog = () => {
    return (
      <Dialog 
        open={isAiSuggestionsOpen} 
        onClose={() => setIsAiSuggestionsOpen(false)}
        fullWidth
        maxWidth="md"
      >
        <DialogTitle>
          <Box display="flex" alignItems="center">
            <TrendingUp sx={{ mr: 1 }} />
            AI Strategy Suggestions
          </Box>
        </DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            Our AI analyzes current market conditions to recommend optimal trading strategies. 
            Adjust the parameters below to refine suggestions based on your market outlook.
          </Typography>
          
          <Grid container spacing={3} sx={{ mb: 4 }}>
            <Grid item xs={12} sm={6} md={4}>
              <FormControl fullWidth>
                <InputLabel>Timeframe</InputLabel>
                <Select
                  name="timeframe"
                  value={marketConditionData.timeframe}
                  onChange={handleMarketConditionChange}
                >
                  <MenuItem value="15m">15 minutes</MenuItem>
                  <MenuItem value="1h">1 hour</MenuItem>
                  <MenuItem value="4h">4 hours</MenuItem>
                  <MenuItem value="1d">1 day</MenuItem>
                  <MenuItem value="1w">1 week</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6} md={4}>
              <FormControl fullWidth>
                <InputLabel>Market Sentiment</InputLabel>
                <Select
                  name="marketSentiment"
                  value={marketConditionData.marketSentiment}
                  onChange={handleMarketConditionChange}
                >
                  <MenuItem value="bullish">Bullish</MenuItem>
                  <MenuItem value="neutral">Neutral</MenuItem>
                  <MenuItem value="bearish">Bearish</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6} md={4}>
              <FormControl fullWidth>
                <InputLabel>Volatility Level</InputLabel>
                <Select
                  name="volatilityLevel"
                  value={marketConditionData.volatilityLevel}
                  onChange={handleMarketConditionChange}
                >
                  <MenuItem value="low">Low</MenuItem>
                  <MenuItem value="medium">Medium</MenuItem>
                  <MenuItem value="high">High</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6} md={6}>
              <FormControl fullWidth>
                <InputLabel>Trend Strength</InputLabel>
                <Select
                  name="trendStrength"
                  value={marketConditionData.trendStrength}
                  onChange={handleMarketConditionChange}
                >
                  <MenuItem value="weak">Weak</MenuItem>
                  <MenuItem value="moderate">Moderate</MenuItem>
                  <MenuItem value="strong">Strong</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6} md={6}>
              <FormControl fullWidth>
                <InputLabel>Risk Tolerance</InputLabel>
                <Select
                  name="riskTolerance"
                  value={marketConditionData.riskTolerance}
                  onChange={handleMarketConditionChange}
                >
                  <MenuItem value="low">Conservative</MenuItem>
                  <MenuItem value="medium">Moderate</MenuItem>
                  <MenuItem value="high">Aggressive</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <Button 
                variant="contained" 
                color="primary" 
                onClick={fetchAiStrategySuggestions}
                disabled={aiSuggestionsLoading}
                startIcon={aiSuggestionsLoading ? <CircularProgress size={20} /> : <TrendingUp />}
                fullWidth
              >
                Generate AI Strategy Suggestions
              </Button>
            </Grid>
          </Grid>
          
          {aiSuggestionsLoading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
              <CircularProgress />
            </Box>
          ) : aiStrategySuggestions ? (
            <>
              <Typography variant="h6" sx={{ mb: 2 }}>
                Recommended Strategies
              </Typography>
              
              <Grid container spacing={2}>
                {aiStrategySuggestions.suggestions?.map((suggestion, index) => (
                  <Grid item xs={12} md={6} key={index}>
                    <Card variant="outlined" sx={{ height: '100%' }}>
                      <CardHeader
                        title={suggestion.strategy}
                        subheader={`Confidence: ${suggestion.confidenceScore}%`}
                        action={
                          <Chip 
                            label={suggestion.riskLevel} 
                            color={
                              suggestion.riskLevel === 'low' ? 'success' : 
                              suggestion.riskLevel === 'medium' ? 'warning' : 'error'
                            }
                            size="small"
                          />
                        }
                      />
                      <CardContent sx={{ pt: 0 }}>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          {suggestion.description}
                        </Typography>
                        
                        <Box sx={{ mt: 2 }}>
                          <Typography variant="subtitle2">Key Parameters:</Typography>
                          <Grid container spacing={1}>
                            {Object.entries(suggestion.parameters).slice(0, 4).map(([key, value]) => (
                              <Grid item xs={6} key={key}>
                                <Typography variant="caption" display="block">
                                  {key}: <strong>{value}</strong>
                                </Typography>
                              </Grid>
                            ))}
                          </Grid>
                        </Box>
                        
                        <Box sx={{ mt: 2 }}>
                          <Typography variant="subtitle2">Recommended For:</Typography>
                          <Box display="flex" flexWrap="wrap" gap={0.5} mt={0.5}>
                            {suggestion.marketConditions?.map((condition, i) => (
                              <Chip key={i} label={condition} size="small" variant="outlined" />
                            ))}
                          </Box>
                        </Box>
                        
                        {suggestion.recommendedPair && (
                          <Typography variant="body2" sx={{ mt: 1 }}>
                            Suggested pair: <strong>{suggestion.recommendedPair}</strong>
                          </Typography>
                        )}
                      </CardContent>
                      <CardActions>
                        <Button 
                          size="small" 
                          startIcon={<Add />}
                          onClick={() => applyAiSuggestedStrategy(suggestion)}
                        >
                          Create Bot with Strategy
                        </Button>
                        <Button 
                          size="small" 
                          startIcon={<Assessment />}
                          onClick={() => {
                            setBacktestConfig({
                              ...backtestConfig,
                              strategy: suggestion.strategy,
                              parameters: suggestion.parameters,
                              symbol: suggestion.recommendedPair || backtestConfig.symbol
                            });
                            setIsAiSuggestionsOpen(false);
                            setTabValue(1); // Switch to backtest tab
                          }}
                        >
                          Backtest Strategy
                        </Button>
                      </CardActions>
                    </Card>
                  </Grid>
                ))}
              </Grid>
              
              {aiStrategySuggestions.marketAnalysis && (
                <Box sx={{ mt: 4 }}>
                  <Typography variant="h6" gutterBottom>
                    Market Analysis
                  </Typography>
                  <Paper variant="outlined" sx={{ p: 2 }}>
                    <Typography variant="body2">
                      {aiStrategySuggestions.marketAnalysis}
                    </Typography>
                  </Paper>
                </Box>
              )}
            </>
          ) : null}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsAiSuggestionsOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    );
  };

  // Functions for social trading
  const handleFollowTrader = async (traderId, copyTrades = false, allocation = 0) => {
    try {
      await TradingBotService.followTrader(traderId, { 
        copyTrades, 
        allocationPercentage: allocation 
      });
      
      // Update followed traders list
      const followed = await TradingBotService.getFollowedTraders();
      setFollowedTraders(followed || []);
      
      // Show success notification
    } catch (err) {
      console.error('Failed to follow trader:', err);
      // Show error notification
    }
  };
  
  const handleUnfollowTrader = async (traderId) => {
    try {
      await TradingBotService.unfollowTrader(traderId);
      
      // Update followed traders list
      setFollowedTraders(prev => prev.filter(trader => trader.id !== traderId));
      
      // Show success notification
    } catch (err) {
      console.error('Failed to unfollow trader:', err);
      // Show error notification
    }
  };
  
  const handleApplySignal = async (signalId, allocation = 5) => {
    try {
      await TradingBotService.applyTradingSignal(signalId, { 
        allocationPercentage: allocation 
      });
      
      // Update signals list
      const signals = await TradingBotService.getTradingSignals();
      setTradingSignals(signals || []);
      
      // Show success notification
    } catch (err) {
      console.error('Failed to apply signal:', err);
      // Show error notification
    }
  };
  
  // Social Trading Tab Component
  const renderSocialTradingTab = () => {
    return (
      <Box sx={{ py: 2 }}>
        <Typography variant="h5" gutterBottom>
          Social Trading
        </Typography>
        
        <Tabs
          value={socialTradingTab}
          onChange={(e, newValue) => setSocialTradingTab(newValue)}
          variant="scrollable"
          scrollButtons="auto"
          sx={{ mb: 3 }}
        >
          <Tab label="Popular Traders" />
          <Tab label="Traders You Follow" />
          <Tab label="Trading Signals" />
        </Tabs>
        
        {socialTradingLoading ? (
          <Box display="flex" justifyContent="center" py={4}>
            <CircularProgress />
          </Box>
        ) : socialTradingTab === 0 ? (
          <Grid container spacing={2}>
            {popularTraders.map((trader) => (
              <Grid item xs={12} md={6} lg={4} key={trader.id}>
                <Card variant="outlined">
                  <CardHeader
                    avatar={
                      <Avatar 
                        src={trader.avatar} 
                        alt={trader.username}
                      >
                        {trader.username?.charAt(0).toUpperCase()}
                      </Avatar>
                    }
                    title={trader.username}
                    subheader={`${trader.followerCount} followers`}
                    action={
                      <Chip 
                        label={`${trader.profitRate}%`} 
                        color={trader.profitRate >= 0 ? 'success' : 'error'}
                        size="small"
                      />
                    }
                  />
                  <CardContent>
                    <Typography variant="body2" color="text.secondary">
                      {trader.bio}
                    </Typography>
                    
                    <Box sx={{ mt: 2 }}>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Win Rate
                          </Typography>
                          <Typography variant="subtitle2">
                            {trader.winRate}%
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Avg. Hold Time
                          </Typography>
                          <Typography variant="subtitle2">
                            {trader.avgHoldTime}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Trades
                          </Typography>
                          <Typography variant="subtitle2">
                            {trader.totalTrades}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Risk Score
                          </Typography>
                          <Typography variant="subtitle2">
                            {trader.riskScore}/10
                          </Typography>
                        </Grid>
                      </Grid>
                    </Box>
                    
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="caption" color="text.secondary">
                        Performance
                      </Typography>
                      <Box sx={{ height: 60 }}>
                        <ResponsiveContainer width="100%" height="100%">
                          <LineChart data={trader.performanceHistory}>
                            <Line 
                              type="monotone" 
                              dataKey="value" 
                              stroke={trader.profitRate >= 0 ? '#4caf50' : '#f44336'} 
                              dot={false}
                              strokeWidth={2}
                            />
                          </LineChart>
                        </ResponsiveContainer>
                      </Box>
                    </Box>
                    
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="caption" color="text.secondary">
                        Top Pairs
                      </Typography>
                      <Box display="flex" flexWrap="wrap" gap={0.5} mt={0.5}>
                        {trader.topPairs?.map((pair, idx) => (
                          <Chip key={idx} label={pair} size="small" variant="outlined" />
                        ))}
                      </Box>
                    </Box>
                  </CardContent>
                  <CardActions>
                    <Button 
                      size="small" 
                      variant="outlined"
                      startIcon={<Add />}
                      onClick={() => handleFollowTrader(trader.id)}
                      disabled={followedTraders.some(t => t.id === trader.id)}
                    >
                      {followedTraders.some(t => t.id === trader.id) ? 'Following' : 'Follow'}
                    </Button>
                    <Button 
                      size="small"
                      startIcon={<FileCopy />}
                      onClick={() => {
                        setDialogType('copyTrader');
                        setDialogData(trader);
                        setDialogOpen(true);
                      }}
                    >
                      Copy Trades
                    </Button>
                  </CardActions>
                </Card>
              </Grid>
            ))}
            
            {popularTraders.length === 0 && (
              <Grid item xs={12}>
                <Alert severity="info">
                  No popular traders available at the moment. Check back later!
                </Alert>
              </Grid>
            )}
          </Grid>
        ) : socialTradingTab === 1 ? (
          <Grid container spacing={2}>
            {followedTraders.map((trader) => (
              <Grid item xs={12} md={6} lg={4} key={trader.id}>
                <Card variant="outlined">
                  <CardHeader
                    avatar={
                      <Avatar 
                        src={trader.avatar} 
                        alt={trader.username}
                      >
                        {trader.username?.charAt(0).toUpperCase()}
                      </Avatar>
                    }
                    title={trader.username}
                    subheader={`Following since ${new Date(trader.followedSince).toLocaleDateString()}`}
                    action={
                      <Chip 
                        label={trader.copyingTrades ? 'Copying' : 'Following'} 
                        color={trader.copyingTrades ? 'primary' : 'default'}
                        size="small"
                        variant={trader.copyingTrades ? 'filled' : 'outlined'}
                      />
                    }
                  />
                  <CardContent>
                    <Box sx={{ mb: 2 }}>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Performance
                          </Typography>
                          <Typography variant="subtitle2" color={trader.performanceSinceFollow >= 0 ? 'success.main' : 'error.main'}>
                            {trader.performanceSinceFollow >= 0 ? '+' : ''}{trader.performanceSinceFollow}%
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Last Active
                          </Typography>
                          <Typography variant="subtitle2">
                            {trader.lastActive}
                          </Typography>
                        </Grid>
                      </Grid>
                    </Box>
                    
                    {trader.copyingTrades && (
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="caption" color="text.secondary">
                          Allocation: {trader.allocation}%
                        </Typography>
                        <LinearProgress 
                          variant="determinate" 
                          value={trader.allocation} 
                          sx={{ height: 8, mt: 0.5, borderRadius: 1 }} 
                        />
                      </Box>
                    )}
                    
                    <Typography variant="caption" color="text.secondary">
                      Recent Activity
                    </Typography>
                    <List dense>
                      {trader.recentActivity?.slice(0, 3).map((activity, idx) => (
                        <ListItem key={idx} dense disableGutters>
                          <ListItemIcon sx={{ minWidth: 30 }}>
                            {activity.type === 'buy' ? 
                              <TrendingUp fontSize="small" color="success" /> : 
                              <TrendingDown fontSize="small" color="error" />
                            }
                          </ListItemIcon>
                          <ListItemText 
                            primary={`${activity.action} ${activity.pair} @ ${activity.price}`} 
                            secondary={activity.time}
                          />
                        </ListItem>
                      ))}
                    </List>
                  </CardContent>
                  <CardActions>
                    <Button 
                      size="small" 
                      variant="outlined"
                      color="error"
                      startIcon={<Close />}
                      onClick={() => handleUnfollowTrader(trader.id)}
                    >
                      Unfollow
                    </Button>
                    <Button 
                      size="small"
                      startIcon={trader.copyingTrades ? <Settings /> : <FileCopy />}
                      onClick={() => {
                        setDialogType(trader.copyingTrades ? 'editCopyTrader' : 'copyTrader');
                        setDialogData(trader);
                        setDialogOpen(true);
                      }}
                    >
                      {trader.copyingTrades ? 'Adjust Settings' : 'Copy Trades'}
                    </Button>
                  </CardActions>
                </Card>
              </Grid>
            ))}
            
            {followedTraders.length === 0 && (
              <Grid item xs={12}>
                <Alert severity="info">
                  You're not following any traders yet. Find popular traders to follow!
                </Alert>
              </Grid>
            )}
          </Grid>
        ) : (
          <Grid container spacing={2}>
            {tradingSignals.map((signal) => (
              <Grid item xs={12} md={6} key={signal.id}>
                <Card variant="outlined">
                  <CardHeader
                    avatar={
                      <Avatar 
                        src={signal.trader.avatar} 
                        alt={signal.trader.username}
                      >
                        {signal.trader.username?.charAt(0).toUpperCase()}
                      </Avatar>
                    }
                    title={`${signal.type.toUpperCase()} ${signal.pair}`}
                    subheader={`From ${signal.trader.username} • ${new Date(signal.timestamp).toLocaleString()}`}
                    action={
                      <Chip 
                        label={signal.confidence}
                        color={
                          signal.confidence === 'High' ? 'success' : 
                          signal.confidence === 'Medium' ? 'warning' : 'error'
                        }
                        size="small"
                      />
                    }
                  />
                  <CardContent>
                    <Typography variant="body2">
                      {signal.description}
                    </Typography>
                    
                    <Box sx={{ mt: 2 }}>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Entry Price
                          </Typography>
                          <Typography variant="subtitle2">
                            {signal.entryPrice}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Take Profit
                          </Typography>
                          <Typography variant="subtitle2">
                            {signal.takeProfit}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Stop Loss
                          </Typography>
                          <Typography variant="subtitle2">
                            {signal.stopLoss}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Expiration
                          </Typography>
                          <Typography variant="subtitle2">
                            {signal.expiration}
                          </Typography>
                        </Grid>
                      </Grid>
                    </Box>
                    
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="caption" color="text.secondary">
                        Potential Return
                      </Typography>
                      <Typography variant="subtitle1" color="success.main">
                        +{signal.potentialReturn}%
                      </Typography>
                    </Box>
                  </CardContent>
                  <CardActions>
                    <Button 
                      size="small" 
                      variant="contained"
                      color={signal.type === 'buy' ? 'success' : 'error'}
                      startIcon={signal.type === 'buy' ? <TrendingUp /> : <TrendingDown />}
                      onClick={() => {
                        setDialogType('applySignal');
                        setDialogData(signal);
                        setDialogOpen(true);
                      }}
                      disabled={signal.applied}
                    >
                      {signal.applied ? 'Applied' : 'Apply Signal'}
                    </Button>
                    <Button 
                      size="small"
                      startIcon={<ShowChart />}
                      onClick={() => {
                        // Open chart for this pair
                      }}
                    >
                      View Chart
                    </Button>
                  </CardActions>
                </Card>
              </Grid>
            ))}
            
            {tradingSignals.length === 0 && (
              <Grid item xs={12}>
                <Alert severity="info">
                  No trading signals available. Follow traders to receive their signals.
                </Alert>
              </Grid>
            )}
          </Grid>
        )}
      </Box>
    );
  };

  // Functions for notifications
  const handleMarkNotificationAsRead = async (notificationId) => {
    try {
      await TradingBotService.markNotificationsRead([notificationId]);
      setNotifications(prev => 
        prev.map(n => n.id === notificationId ? { ...n, read: true } : n)
      );
      setUnreadNotifications(prev => Math.max(0, prev - 1));
    } catch (err) {
      console.error('Failed to mark notification as read:', err);
    }
  };
  
  const handleMarkAllNotificationsAsRead = async () => {
    try {
      const unreadIds = notifications
        .filter(n => !n.read)
        .map(n => n.id);
      
      if (unreadIds.length === 0) return;
      
      await TradingBotService.markNotificationsRead(unreadIds);
      setNotifications(prev => 
        prev.map(n => ({ ...n, read: true }))
      );
      setUnreadNotifications(0);
    } catch (err) {
      console.error('Failed to mark all notifications as read:', err);
    }
  };
  
  const handleUpdateNotificationPreferences = async (preferences) => {
    try {
      await TradingBotService.updateNotificationPreferences(preferences);
      setNotificationPreferences(preferences);
    } catch (err) {
      console.error('Failed to update notification preferences:', err);
    }
  };
  
  // Notification Center Component
  const renderNotificationsCenter = () => {
    return (
      <Dialog
        open={isNotificationsOpen}
        onClose={() => setIsNotificationsOpen(false)}
        fullWidth
        maxWidth="sm"
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" justifyContent="space-between">
            <Box display="flex" alignItems="center">
              <NotificationsActive sx={{ mr: 1 }} />
              Notification Center
            </Box>
            <Box>
              <Tabs
                value={tabValue === 4 ? 0 : 1}
                onChange={(e, val) => val === 0 ? null : setTabValue(4)}
                aria-label="notification tabs"
              >
                <Tab label="Notifications" />
                <Tab label="Settings" />
              </Tabs>
            </Box>
          </Box>
        </DialogTitle>
        <DialogContent>
          {tabValue !== 4 ? (
            <Box>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="subtitle1">
                  {unreadNotifications > 0 ? `${unreadNotifications} Unread Notifications` : 'All Read'}
                </Typography>
                {unreadNotifications > 0 && (
                  <Button 
                    size="small" 
                    onClick={handleMarkAllNotificationsAsRead}
                  >
                    Mark All Read
                  </Button>
                )}
              </Box>
              
              <List>
                {notifications.length > 0 ? notifications.map((notification) => (
                  <ListItem 
                    key={notification.id} 
                    sx={{ 
                      bgcolor: notification.read ? 'transparent' : 'action.hover',
                      borderRadius: 1,
                      mb: 1
                    }}
                    secondaryAction={
                      !notification.read ? (
                        <IconButton 
                          edge="end" 
                          size="small"
                          onClick={() => handleMarkNotificationAsRead(notification.id)}
                        >
                          <CheckCircle fontSize="small" />
                        </IconButton>
                      ) : null
                    }
                  >
                    <ListItemIcon>
                      {notification.type === 'success' && <CheckCircle color="success" />}
                      {notification.type === 'warning' && <Warning color="warning" />}
                      {notification.type === 'error' && <Error color="error" />}
                      {notification.type === 'info' && <Info color="info" />}
                    </ListItemIcon>
                    <ListItemText 
                      primary={notification.title} 
                      secondary={
                        <>
                          <Typography variant="body2" component="span">
                            {notification.message}
                          </Typography>
                          <Typography variant="caption" display="block" color="text.secondary">
                            {new Date(notification.timestamp).toLocaleString()}
                          </Typography>
                        </>
                      } 
                    />
                  </ListItem>
                )) : (
                  <Box textAlign="center" py={4}>
                    <NotificationsActive sx={{ fontSize: 60, color: 'text.disabled', mb: 2 }} />
                    <Typography variant="body1" color="text.secondary">
                      No notifications yet
                    </Typography>
                    <Typography variant="body2" color="text.disabled">
                      You'll see bot alerts and system notifications here
                    </Typography>
                  </Box>
                )}
              </List>
            </Box>
          ) : (
            <Box>
              <Typography variant="h6" gutterBottom>
                Notification Settings
              </Typography>
              
              <Box sx={{ mb: 3 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Bot Notifications
                </Typography>
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.botStartStop}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        botStartStop: e.target.checked 
                      }))}
                    />
                  }
                  label="Bot start/stop notifications"
                />
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.profitThreshold}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        profitThreshold: e.target.checked 
                      }))}
                    />
                  }
                  label="Profit threshold alerts"
                />
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.lossThreshold}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        lossThreshold: e.target.checked 
                      }))}
                    />
                  }
                  label="Loss threshold alerts"
                />
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.tradingVolumeAlert}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        tradingVolumeAlert: e.target.checked 
                      }))}
                    />
                  }
                  label="High trading volume alerts"
                />
              </Box>
              
              <Box sx={{ mb: 3 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Trading Signals
                </Typography>
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.technicalSignals}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        technicalSignals: e.target.checked 
                      }))}
                    />
                  }
                  label="Technical analysis signals"
                />
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.socialSignals}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        socialSignals: e.target.checked 
                      }))}
                    />
                  }
                  label="Social trading signals"
                />
              </Box>
              
              <Box sx={{ mb: 3 }}>
                <Typography variant="subtitle2" gutterBottom>
                  System
                </Typography>
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.systemAlerts}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        systemAlerts: e.target.checked 
                      }))}
                    />
                  }
                  label="System alerts and announcements"
                />
              </Box>
              
              <Box sx={{ mb: 3 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Delivery Methods
                </Typography>
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.emailNotifications}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        emailNotifications: e.target.checked 
                      }))}
                    />
                  }
                  label="Email notifications"
                />
                <FormControlLabel
                  control={
                    <Switch 
                      checked={notificationPreferences.pushNotifications}
                      onChange={(e) => setNotificationPreferences(prev => ({ 
                        ...prev, 
                        pushNotifications: e.target.checked 
                      }))}
                    />
                  }
                  label="Push notifications"
                />
              </Box>
              
              <Button 
                variant="contained" 
                onClick={() => handleUpdateNotificationPreferences(notificationPreferences)}
                fullWidth
              >
                Save Preferences
              </Button>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsNotificationsOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    );
  };

  // Functions for advanced backtesting and charting
  const handleFetchAdvancedChartData = async (symbol, timeframe, indicators = []) => {
    try {
      const chartData = await TradingBotService.getAdvancedChartData(
        symbol, 
        timeframe, 
        indicators,
        {
          startTime: backtestConfig.startDate ? new Date(backtestConfig.startDate).getTime() : undefined,
          endTime: backtestConfig.endDate ? new Date(backtestConfig.endDate).getTime() : undefined
        }
      );
      setAdvancedChartData(chartData);
    } catch (err) {
      console.error('Failed to fetch advanced chart data:', err);
    }
  };
  
  const handleRunAdvancedBacktest = async () => {
    try {
      setIsBacktesting(true);
      const results = await TradingBotService.runAdvancedBacktest(advancedBacktestConfig);
      setBacktestResults(results);
    } catch (err) {
      console.error('Failed to run advanced backtest:', err);
    } finally {
      setIsBacktesting(false);
    }
  };
  
  const handleAddRemoveIndicator = (indicator) => {
    if (selectedIndicators.includes(indicator)) {
      setSelectedIndicators(prev => prev.filter(i => i !== indicator));
    } else {
      setSelectedIndicators(prev => [...prev, indicator]);
    }
  };
  
  // Add indicator configuration component
  const renderIndicatorConfig = (indicator) => {
    return (
      <Accordion key={indicator.id} sx={{ mt: 1 }}>
        <AccordionSummary expandIcon={<ExpandMore />}>
          <Typography>{indicator.name}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Grid container spacing={2}>
            {indicator.parameters.map((param) => (
              <Grid item xs={12} sm={6} key={param.name}>
                <TextField
                  label={param.name}
                  type={param.type === 'number' ? 'number' : 'text'}
                  value={param.defaultValue}
                  onChange={(e) => {
                    // Update indicator parameter
                    const value = param.type === 'number' ? Number(e.target.value) : e.target.value;
                    
                    // Clone and update the indicator in the selected indicators
                    const updatedIndicators = selectedIndicators.map(ind => {
                      if (ind.id === indicator.id) {
                        const updatedParameters = ind.parameters.map(p => {
                          if (p.name === param.name) {
                            return { ...p, defaultValue: value };
                          }
                          return p;
                        });
                        
                        return { ...ind, parameters: updatedParameters };
                      }
                      return ind;
                    });
                    
                    setSelectedIndicators(updatedIndicators);
                  }}
                  fullWidth
                  size="small"
                  inputProps={{
                    min: param.min,
                    max: param.max,
                    step: param.step
                  }}
                  helperText={param.description}
                />
              </Grid>
            ))}
          </Grid>
        </AccordionDetails>
      </Accordion>
    );
  };
  
  // Advanced Backtesting Component
  const renderAdvancedBacktestTab = () => {
    return (
      <Box sx={{ py: 2 }}>
        <Typography variant="h5" gutterBottom>
          Advanced Backtesting
        </Typography>
        
        <Grid container spacing={3}>
          <Grid item xs={12} md={4}>
            <Paper sx={{ p: 2, height: '100%' }}>
              <Typography variant="h6" gutterBottom>
                Backtest Configuration
              </Typography>
              
              <FormControl fullWidth margin="normal">
                <InputLabel>Strategy</InputLabel>
                <Select
                  value={advancedBacktestConfig.strategy}
                  onChange={(e) => setAdvancedBacktestConfig(prev => ({
                    ...prev,
                    strategy: e.target.value
                  }))}
                >
                  {availableStrategies.map((strategy) => (
                    <MenuItem key={strategy.id} value={strategy.id}>
                      {strategy.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              
              <FormControl fullWidth margin="normal">
                <InputLabel>Symbol</InputLabel>
                <Select
                  value={advancedBacktestConfig.symbol}
                  onChange={(e) => setAdvancedBacktestConfig(prev => ({
                    ...prev,
                    symbol: e.target.value
                  }))}
                >
                  {availablePairs.map((pair) => (
                    <MenuItem key={pair} value={pair}>
                      {pair}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              
              <FormControl fullWidth margin="normal">
                <InputLabel>Timeframe</InputLabel>
                <Select
                  value={advancedBacktestConfig.timeframe}
                  onChange={(e) => setAdvancedBacktestConfig(prev => ({
                    ...prev,
                    timeframe: e.target.value
                  }))}
                >
                  <MenuItem value="1m">1 Minute</MenuItem>
                  <MenuItem value="5m">5 Minutes</MenuItem>
                  <MenuItem value="15m">15 Minutes</MenuItem>
                  <MenuItem value="30m">30 Minutes</MenuItem>
                  <MenuItem value="1h">1 Hour</MenuItem>
                  <MenuItem value="4h">4 Hours</MenuItem>
                  <MenuItem value="1d">1 Day</MenuItem>
                </Select>
              </FormControl>
              
              <Grid container spacing={2} sx={{ mt: 1 }}>
                <Grid item xs={12} sm={6}>
                  <TextField
                    label="Start Date"
                    type="date"
                    value={advancedBacktestConfig.startDate}
                    onChange={(e) => setAdvancedBacktestConfig(prev => ({
                      ...prev,
                      startDate: e.target.value
                    }))}
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    label="End Date"
                    type="date"
                    value={advancedBacktestConfig.endDate}
                    onChange={(e) => setAdvancedBacktestConfig(prev => ({
                      ...prev,
                      endDate: e.target.value
                    }))}
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
              </Grid>
              
              <TextField
                label="Initial Capital"
                type="number"
                value={advancedBacktestConfig.initialCapital}
                onChange={(e) => setAdvancedBacktestConfig(prev => ({
                  ...prev,
                  initialCapital: Number(e.target.value)
                }))}
                fullWidth
                margin="normal"
                InputProps={{
                  startAdornment: <InputAdornment position="start">$</InputAdornment>,
                }}
              />
              
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMore />}>
                  <Typography>Risk Controls</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        label="Max Drawdown (%)"
                        type="number"
                        value={advancedBacktestConfig.riskControls.maxDrawdown}
                        onChange={(e) => setAdvancedBacktestConfig(prev => ({
                          ...prev,
                          riskControls: {
                            ...prev.riskControls,
                            maxDrawdown: Number(e.target.value)
                          }
                        }))}
                        fullWidth
                        size="small"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        label="Stop Loss (%)"
                        type="number"
                        value={advancedBacktestConfig.riskControls.stopLoss}
                        onChange={(e) => setAdvancedBacktestConfig(prev => ({
                          ...prev,
                          riskControls: {
                            ...prev.riskControls,
                            stopLoss: Number(e.target.value)
                          }
                        }))}
                        fullWidth
                        size="small"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        label="Take Profit (%)"
                        type="number"
                        value={advancedBacktestConfig.riskControls.takeProfit}
                        onChange={(e) => setAdvancedBacktestConfig(prev => ({
                          ...prev,
                          riskControls: {
                            ...prev.riskControls,
                            takeProfit: Number(e.target.value)
                          }
                        }))}
                        fullWidth
                        size="small"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        label="Max Open Positions"
                        type="number"
                        value={advancedBacktestConfig.riskControls.maxOpenPositions}
                        onChange={(e) => setAdvancedBacktestConfig(prev => ({
                          ...prev,
                          riskControls: {
                            ...prev.riskControls,
                            maxOpenPositions: Number(e.target.value)
                          }
                        }))}
                        fullWidth
                        size="small"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <FormControlLabel
                        control={
                          <Switch 
                            checked={advancedBacktestConfig.riskControls.trailingStop}
                            onChange={(e) => setAdvancedBacktestConfig(prev => ({
                              ...prev,
                              riskControls: {
                                ...prev.riskControls,
                                trailingStop: e.target.checked
                              }
                            }))}
                          />
                        }
                        label="Trailing Stop"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        label="Trailing Stop (%)"
                        type="number"
                        value={advancedBacktestConfig.riskControls.trailingStopPercent}
                        onChange={(e) => setAdvancedBacktestConfig(prev => ({
                          ...prev,
                          riskControls: {
                            ...prev.riskControls,
                            trailingStopPercent: Number(e.target.value)
                          }
                        }))}
                        fullWidth
                        size="small"
                        disabled={!advancedBacktestConfig.riskControls.trailingStop}
                      />
                    </Grid>
                  </Grid>
                </AccordionDetails>
              </Accordion>
              
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMore />}>
                  <Typography>Market Regime Filter</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <FormControlLabel
                    control={
                      <Switch 
                        checked={advancedBacktestConfig.marketRegimeFilter.enabled}
                        onChange={(e) => setAdvancedBacktestConfig(prev => ({
                          ...prev,
                          marketRegimeFilter: {
                            ...prev.marketRegimeFilter,
                            enabled: e.target.checked
                          }
                        }))}
                      />
                    }
                    label="Filter Trades by Market Regime"
                  />
                  
                  <Typography variant="body2" color="text.secondary" sx={{ mt: 1, mb: 2 }}>
                    Select which market conditions to trade in:
                  </Typography>
                  
                  <FormGroup>
                    <FormControlLabel
                      control={
                        <Checkbox 
                          checked={advancedBacktestConfig.marketRegimeFilter.regimes.includes('trending')}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setAdvancedBacktestConfig(prev => ({
                                ...prev,
                                marketRegimeFilter: {
                                  ...prev.marketRegimeFilter,
                                  regimes: [...prev.marketRegimeFilter.regimes, 'trending']
                                }
                              }));
                            } else {
                              setAdvancedBacktestConfig(prev => ({
                                ...prev,
                                marketRegimeFilter: {
                                  ...prev.marketRegimeFilter,
                                  regimes: prev.marketRegimeFilter.regimes.filter(r => r !== 'trending')
                                }
                              }));
                            }
                          }}
                          disabled={!advancedBacktestConfig.marketRegimeFilter.enabled}
                        />
                      }
                      label="Trending Market"
                    />
                    <FormControlLabel
                      control={
                        <Checkbox 
                          checked={advancedBacktestConfig.marketRegimeFilter.regimes.includes('ranging')}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setAdvancedBacktestConfig(prev => ({
                                ...prev,
                                marketRegimeFilter: {
                                  ...prev.marketRegimeFilter,
                                  regimes: [...prev.marketRegimeFilter.regimes, 'ranging']
                                }
                              }));
                            } else {
                              setAdvancedBacktestConfig(prev => ({
                                ...prev,
                                marketRegimeFilter: {
                                  ...prev.marketRegimeFilter,
                                  regimes: prev.marketRegimeFilter.regimes.filter(r => r !== 'ranging')
                                }
                              }));
                            }
                          }}
                          disabled={!advancedBacktestConfig.marketRegimeFilter.enabled}
                        />
                      }
                      label="Ranging Market"
                    />
                    <FormControlLabel
                      control={
                        <Checkbox 
                          checked={advancedBacktestConfig.marketRegimeFilter.regimes.includes('volatile')}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setAdvancedBacktestConfig(prev => ({
                                ...prev,
                                marketRegimeFilter: {
                                  ...prev.marketRegimeFilter,
                                  regimes: [...prev.marketRegimeFilter.regimes, 'volatile']
                                }
                              }));
                            } else {
                              setAdvancedBacktestConfig(prev => ({
                                ...prev,
                                marketRegimeFilter: {
                                  ...prev.marketRegimeFilter,
                                  regimes: prev.marketRegimeFilter.regimes.filter(r => r !== 'volatile')
                                }
                              }));
                            }
                          }}
                          disabled={!advancedBacktestConfig.marketRegimeFilter.enabled}
                        />
                      }
                      label="Volatile Market"
                    />
                  </FormGroup>
                </AccordionDetails>
              </Accordion>
              
              <Box sx={{ mt: 2 }}>
                <Button
                  variant="contained"
                  color="primary"
                  fullWidth
                  onClick={handleRunAdvancedBacktest}
                  disabled={isBacktesting}
                  startIcon={isBacktesting ? <CircularProgress size={18} /> : <Assessment />}
                >
                  {isBacktesting ? 'Running Backtest...' : 'Run Advanced Backtest'}
                </Button>
              </Box>
            </Paper>
          </Grid>
          
          <Grid item xs={12} md={8}>
            <Paper sx={{ p: 2, mb: 3 }}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">
                  Advanced Chart
                </Typography>
                
                <Box>
                  <ToggleButtonGroup
                    size="small"
                    value={chartType}
                    exclusive
                    onChange={(e, newType) => {
                      if (newType) setChartType(newType);
                    }}
                  >
                    <ToggleButton value="area">Area</ToggleButton>
                    <ToggleButton value="candlestick">Candlestick</ToggleButton>
                    <ToggleButton value="line">Line</ToggleButton>
                    <ToggleButton value="bar">Bar</ToggleButton>
                  </ToggleButtonGroup>
                </Box>
              </Box>
              
              <Box sx={{ height: 400 }}>
                {advancedChartData ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <ComposedChart data={advancedChartData.data}>
                      <XAxis dataKey="time" />
                      <YAxis yAxisId="price" domain={['auto', 'auto']} />
                      <YAxis yAxisId="volume" orientation="right" domain={['auto', 'auto']} />
                      <CartesianGrid strokeDasharray="3 3" />
                      <RechartsTooltip />
                      <Legend />
                      
                      {chartType === 'area' && (
                        <Area 
                          type="monotone" 
                          dataKey="close" 
                          fill={theme.palette.primary.main}
                          stroke={theme.palette.primary.main}
                          fillOpacity={0.2}
                          yAxisId="price"
                          name="Price"
                        />
                      )}
                      
                      {chartType === 'line' && (
                        <Line 
                          type="monotone" 
                          dataKey="close" 
                          stroke={theme.palette.primary.main}
                          yAxisId="price"
                          name="Price"
                          dot={false}
                        />
                      )}
                      
                      {chartType === 'bar' && (
                        <Bar 
                          dataKey="close" 
                          fill={theme.palette.primary.main}
                          yAxisId="price"
                          name="Price"
                        />
                      )}
                      
                      {/* Volume bars */}
                      <Bar 
                        dataKey="volume" 
                        fill={theme.palette.action.hover} 
                        yAxisId="volume"
                        name="Volume"
                        opacity={0.5}
                      />
                      
                      {/* Render selected indicators */}
                      {selectedIndicators.map((indicator) => (
                        <Line
                          key={indicator.id}
                          type="monotone"
                          dataKey={indicator.id}
                          stroke={indicator.color}
                          dot={false}
                          yAxisId={indicator.yAxisId || "price"}
                          name={indicator.name}
                          strokeDasharray={indicator.strokeDasharray || ""}
                        />
                      ))}
                      
                      <Brush dataKey="time" height={30} stroke={theme.palette.grey[500]} />
                    </ComposedChart>
                  </ResponsiveContainer>
                ) : (
                  <Box 
                    display="flex" 
                    flexDirection="column" 
                    alignItems="center" 
                    justifyContent="center" 
                    height="100%"
                  >
                    <ShowChart sx={{ fontSize: 60, color: 'text.disabled', mb: 2 }} />
                    <Typography variant="body1">
                      Select parameters and fetch chart data
                    </Typography>
                    <Button 
                      variant="contained" 
                      onClick={() => handleFetchAdvancedChartData(
                        advancedBacktestConfig.symbol, 
                        advancedBacktestConfig.timeframe,
                        selectedIndicators
                      )}
                      sx={{ mt: 2 }}
                    >
                      Load Chart Data
                    </Button>
                  </Box>
                )}
              </Box>
            </Paper>
            
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2, height: '100%' }}>
                  <Typography variant="h6" gutterBottom>
                    Technical Indicators
                  </Typography>
                  
                  <Box sx={{ maxHeight: 300, overflow: 'auto' }}>
                    <List dense>
                      {availableIndicators.map((indicator) => (
                        <ListItem key={indicator.id}>
                          <ListItemIcon>
                            <Checkbox 
                              checked={selectedIndicators.some(ind => ind.id === indicator.id)}
                              onChange={() => handleAddRemoveIndicator(indicator)}
                              edge="start"
                            />
                          </ListItemIcon>
                          <ListItemText 
                            primary={indicator.name} 
                            secondary={indicator.description} 
                          />
                        </ListItem>
                      ))}
                    </List>
                  </Box>
                  
                  <Divider sx={{ my: 2 }} />
                  
                  <Box>
                    <Typography variant="subtitle2" gutterBottom>
                      Selected Indicators Configuration
                    </Typography>
                    {selectedIndicators.map(indicator => renderIndicatorConfig(indicator))}
                  </Box>
                </Paper>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2, height: '100%' }}>
                  <Typography variant="h6" gutterBottom>
                    Backtest Results
                  </Typography>
                  
                  {backtestResults ? (
                    <>
                      <Box sx={{ mb: 3 }}>
                        <Grid container spacing={2}>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              Total Return
                            </Typography>
                            <Typography 
                              variant="h5" 
                              color={backtestResults.totalReturn >= 0 ? 'success.main' : 'error.main'}
                            >
                              {backtestResults.totalReturn >= 0 ? '+' : ''}
                              {backtestResults.totalReturn.toFixed(2)}%
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              Profit Factor
                            </Typography>
                            <Typography variant="h5">
                              {backtestResults.profitFactor.toFixed(2)}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              Sharpe Ratio
                            </Typography>
                            <Typography variant="h5">
                              {backtestResults.sharpeRatio.toFixed(2)}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              Max Drawdown
                            </Typography>
                            <Typography variant="h5" color="error.main">
                              {backtestResults.maxDrawdown.toFixed(2)}%
                            </Typography>
                          </Grid>
                        </Grid>
                      </Box>
                      
                      <Divider sx={{ my: 2 }} />
                      
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="subtitle2" gutterBottom>
                          Trade Statistics
                        </Typography>
                        <Grid container spacing={1}>
                          <Grid item xs={4}>
                            <Typography variant="caption" color="text.secondary">
                              Total Trades
                            </Typography>
                            <Typography variant="body1">
                              {backtestResults.totalTrades}
                            </Typography>
                          </Grid>
                          <Grid item xs={4}>
                            <Typography variant="caption" color="text.secondary">
                              Win Rate
                            </Typography>
                            <Typography variant="body1">
                              {backtestResults.winRate.toFixed(2)}%
                            </Typography>
                          </Grid>
                          <Grid item xs={4}>
                            <Typography variant="caption" color="text.secondary">
                              Avg Profit
                            </Typography>
                            <Typography variant="body1">
                              {backtestResults.avgProfit.toFixed(2)}%
                            </Typography>
                          </Grid>
                        </Grid>
                      </Box>
                      
                      <Box sx={{ height: 200, mb: 2 }}>
                        <Typography variant="subtitle2" gutterBottom>
                          Equity Curve
                        </Typography>
                        <ResponsiveContainer width="100%" height="100%">
                          <AreaChart data={backtestResults.equityCurve}>
                            <XAxis dataKey="time" />
                            <YAxis />
                            <CartesianGrid strokeDasharray="3 3" />
                            <RechartsTooltip />
                            <Area 
                              type="monotone" 
                              dataKey="equity" 
                              stroke={theme.palette.primary.main} 
                              fill={theme.palette.primary.main} 
                              fillOpacity={0.2}
                            />
                          </AreaChart>
                        </ResponsiveContainer>
                      </Box>
                      
                      <Box sx={{ mt: 2 }}>
                        <Button 
                          startIcon={<Edit />}
                          onClick={() => {
                            setNewBotConfig({
                              ...newBotConfig,
                              strategy: advancedBacktestConfig.strategy,
                              symbol: advancedBacktestConfig.symbol,
                              parameters: advancedBacktestConfig.customParameters,
                              riskControls: advancedBacktestConfig.riskControls
                            });
                            setIsCreatingBot(true);
                            setTabValue(0);
                          }}
                        >
                          Create Bot with These Settings
                        </Button>
                      </Box>
                    </>
                  ) : (
                    <Box 
                      display="flex" 
                      flexDirection="column" 
                      alignItems="center" 
                      justifyContent="center" 
                      height="100%"
                      minHeight={200}
                    >
                      <Assessment sx={{ fontSize: 40, color: 'text.disabled', mb: 1 }} />
                      <Typography variant="body1" color="text.secondary">
                        No backtest results yet
                      </Typography>
                      <Typography variant="body2" color="text.disabled">
                        Configure parameters and run a backtest
                      </Typography>
                    </Box>
                  )}
                </Paper>
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </Box>
    );
  };

  // News and Sentiment Analysis Component
  const renderNewsAndSentimentTab = () => {
    return (
      <Box sx={{ py: 2 }}>
        <Typography variant="h5" gutterBottom>
          Market News & Sentiment
        </Typography>
        
        <Box sx={{ mb: 3 }}>
          <FormControl sx={{ minWidth: 150 }} size="small">
            <InputLabel>Select Symbol</InputLabel>
            <Select
              value={selectedNewsSymbol}
              onChange={(e) => setSelectedNewsSymbol(e.target.value)}
              label="Select Symbol"
            >
              <MenuItem value="BTC">Bitcoin (BTC)</MenuItem>
              <MenuItem value="ETH">Ethereum (ETH)</MenuItem>
              <MenuItem value="SOL">Solana (SOL)</MenuItem>
              <MenuItem value="ADA">Cardano (ADA)</MenuItem>
              <MenuItem value="DOT">Polkadot (DOT)</MenuItem>
              <MenuItem value="AVAX">Avalanche (AVAX)</MenuItem>
            </Select>
          </FormControl>
        </Box>
        
        {newsLoading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
            <CircularProgress />
          </Box>
        ) : (
          <Grid container spacing={3}>
            {/* Sentiment Analysis */}
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>
                  Sentiment Analysis
                </Typography>
                
                {socialSentiment && newsSentiment ? (
                  <>
                    <Box sx={{ mb: 3 }}>
                      <Typography variant="subtitle2" gutterBottom>
                        Overall Market Sentiment
                      </Typography>
                      
                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                        <Box sx={{ width: '100%', mr: 1 }}>
                          <LinearProgress
                            variant="determinate"
                            value={(socialSentiment.score + 1) * 50} // Convert from -1...1 to 0...100
                            sx={{
                              height: 10,
                              borderRadius: 5,
                              '& .MuiLinearProgress-bar': {
                                backgroundColor: socialSentiment.score > 0.2 ? 'success.main' :
                                                 socialSentiment.score < -0.2 ? 'error.main' : 'warning.main'
                              }
                            }}
                          />
                        </Box>
                        <Box sx={{ minWidth: 35 }}>
                          <Typography variant="body2" color="text.secondary">
                            {((socialSentiment.score + 1) * 50).toFixed(0)}%
                          </Typography>
                        </Box>
                      </Box>
                      
                      <Grid container spacing={2} sx={{ mt: 2 }}>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Bullish signals
                          </Typography>
                          <Typography variant="h6" color="success.main">
                            {socialSentiment.bullishCount}
                          </Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="caption" color="text.secondary">
                            Bearish signals
                          </Typography>
                          <Typography variant="h6" color="error.main">
                            {socialSentiment.bearishCount}
                          </Typography>
                        </Grid>
                      </Grid>
                    </Box>
                    
                    <Divider sx={{ my: 2 }} />
                    
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="subtitle2" gutterBottom>
                        Sentiment Trend (7 Days)
                      </Typography>
                      
                      <Box sx={{ height: 200 }}>
                        <ResponsiveContainer width="100%" height="100%">
                          <LineChart data={newsSentiment.history}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="date" />
                            <YAxis domain={[-1, 1]} />
                            <Tooltip />
                            <Line
                              type="monotone"
                              dataKey="sentiment"
                              stroke={theme.palette.primary.main}
                              strokeWidth={2}
                              dot={false}
                            />
                          </LineChart>
                        </ResponsiveContainer>
                      </Box>
                    </Box>
                    
                    <Box sx={{ mt: 3 }}>
                      <Typography variant="subtitle2" gutterBottom>
                        Social Media Activity
                      </Typography>
                      
                      <Grid container spacing={2}>
                        <Grid item xs={4}>
                          <Typography variant="caption" color="text.secondary">
                            Twitter
                          </Typography>
                          <Typography variant="body1">
                            {socialSentiment.twitterActivity} posts
                          </Typography>
                        </Grid>
                        <Grid item xs={4}>
                          <Typography variant="caption" color="text.secondary">
                            Reddit
                          </Typography>
                          <Typography variant="body1">
                            {socialSentiment.redditActivity} posts
                          </Typography>
                        </Grid>
                        <Grid item xs={4}>
                          <Typography variant="caption" color="text.secondary">
                            Discord
                          </Typography>
                          <Typography variant="body1">
                            {socialSentiment.discordActivity} posts
                          </Typography>
                        </Grid>
                      </Grid>
                    </Box>
                  </>
                ) : (
                  <Alert severity="info">
                    No sentiment data available for {selectedNewsSymbol}
                  </Alert>
                )}
              </Paper>
            </Grid>
            
            {/* News Articles */}
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2, height: '100%' }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                  <Typography variant="h6">
                    Latest News
                  </Typography>
                  <IconButton onClick={() => {
                    const fetchNewsAndSentiment = async () => {
                      try {
                        setNewsLoading(true);
                        
                        // Fetch crypto news
                        const news = await TradingBotService.getCryptoNews(selectedNewsSymbol);
                        setNewsArticles(news || []);
                      } catch (err) {
                        console.error('Failed to refresh news:', err);
                      } finally {
                        setNewsLoading(false);
                      }
                    };
                    
                    fetchNewsAndSentiment();
                  }}>
                    <Refresh />
                  </IconButton>
                </Box>
                
                <List
                  sx={{ 
                    maxHeight: 500, 
                    overflow: 'auto',
                    '& .MuiListItem-root': { 
                      borderLeft: '4px solid transparent',
                      '&.positive': { borderLeftColor: 'success.main' },
                      '&.negative': { borderLeftColor: 'error.main' },
                      '&.neutral': { borderLeftColor: 'info.main' },
                    }
                  }}
                >
                  {newsArticles.length > 0 ? newsArticles.map((article, index) => (
                    <ListItem
                      key={index}
                      alignItems="flex-start"
                      divider={index < newsArticles.length - 1}
                      className={
                        article.sentiment > 0.2 ? 'positive' :
                        article.sentiment < -0.2 ? 'negative' : 'neutral'
                      }
                    >
                      <ListItemText
                        primary={
                          <Link 
                            href={article.url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            underline="hover"
                            color="textPrimary"
                            sx={{ fontWeight: 500 }}
                          >
                            {article.title}
                          </Link>
                        }
                        secondary={
                          <>
                            <Typography
                              sx={{ display: 'inline' }}
                              component="span"
                              variant="body2"
                              color="text.primary"
                            >
                              {article.source} - {new Date(article.publishedAt).toLocaleDateString()}
                            </Typography>
                            <Typography variant="body2" sx={{ mt: 0.5 }}>
                              {article.summary}
                            </Typography>
                            <Box sx={{ mt: 0.5 }}>
                              {article.tags?.map((tag, tagIdx) => (
                                <Chip 
                                  key={tagIdx} 
                                  label={tag} 
                                  size="small" 
                                  variant="outlined"
                                  sx={{ mr: 0.5, mt: 0.5 }}
                                />
                              ))}
                            </Box>
                          </>
                        }
                      />
                    </ListItem>
                  )) : (
                    <Box textAlign="center" py={4}>
                      <Info sx={{ fontSize: 48, color: 'text.disabled', mb: 1 }} />
                      <Typography variant="body1">
                        No news articles found
                      </Typography>
                    </Box>
                  )}
                </List>
              </Paper>
            </Grid>
            
            {/* Upcoming Events */}
            <Grid item xs={12}>
              <Paper sx={{ p: 2 }}>
                <Typography variant="h6" gutterBottom>
                  Upcoming Events
                </Typography>
                
                {upcomingEvents.length > 0 ? (
                  <TableContainer>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Date</TableCell>
                          <TableCell>Title</TableCell>
                          <TableCell>Type</TableCell>
                          <TableCell>Impact</TableCell>
                          <TableCell>Project</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {upcomingEvents.map((event, index) => (
                          <TableRow key={index} sx={{
                            '& td': { 
                              backgroundColor: index % 2 === 0 ? 'rgba(0, 0, 0, 0.02)' : 'inherit'
                            }
                          }}>
                            <TableCell>
                              {new Date(event.date).toLocaleDateString()}
                            </TableCell>
                            <TableCell>
                              <Link
                                href={event.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                underline="hover"
                              >
                                {event.title}
                              </Link>
                            </TableCell>
                            <TableCell>
                              <Chip 
                                label={event.type} 
                                size="small" 
                                color={
                                  event.type === 'Mainnet Launch' || event.type === 'Hard Fork' ? 'primary' : 
                                  event.type === 'Conference' ? 'secondary' : 'default'
                                }
                                variant="outlined"
                              />
                            </TableCell>
                            <TableCell>
                              <Rating
                                value={event.impact}
                                max={3}
                                readOnly
                                size="small"
                              />
                            </TableCell>
                            <TableCell>{event.project}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                ) : (
                  <Alert severity="info">
                    No upcoming events found for {selectedNewsSymbol}
                  </Alert>
                )}
              </Paper>
            </Grid>
          </Grid>
        )}
      </Box>
    );
  };

  // Load news data
  const loadNewsData = async (symbol = 'BTC') => {
    try {
      setNewsLoading(true);
      
      // Fetch news articles
      const news = await TradingBotService.getCryptoNews(symbol === 'ALL' ? '' : symbol);
      setNewsArticles(news || []);
      
      // Fetch social sentiment
      const socialData = await TradingBotService.getSocialSentiment(symbol === 'ALL' ? 'BTC' : symbol);
      setSocialSentiment(socialData);
      
      // Fetch news sentiment trend
      const newsData = await TradingBotService.getNewsSentiment(symbol === 'ALL' ? 'BTC' : symbol);
      setNewsSentiment(newsData);
      
      // Fetch upcoming events
      const events = await TradingBotService.getCryptoEvents(symbol === 'ALL' ? '' : symbol);
      setUpcomingEvents(events || []);
      
    } catch (err) {
      console.error('Failed to load news data:', err);
      setError(`Failed to load news data: ${err.message}`);
    } finally {
      setNewsLoading(false);
    }
  };

  // Render ML Predictions and Market Analysis Tab
  const renderMlPredictionsTab = () => {
    return (
      <Box sx={{ py: 2 }}>
        <Typography variant="h5" gutterBottom>
          ML Predictions & Market Analysis
        </Typography>
        
        <Box sx={{ mb: 3 }}>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} md={4}>
              <FormControl fullWidth size="small">
                <InputLabel>Select Symbol</InputLabel>
                <Select
                  value={advancedBacktestConfig.symbol}
                  onChange={(e) => setAdvancedBacktestConfig({
                    ...advancedBacktestConfig,
                    symbol: e.target.value
                  })}
                  label="Select Symbol"
                >
                  <MenuItem value="BTCUSDT">Bitcoin (BTC/USDT)</MenuItem>
                  <MenuItem value="ETHUSDT">Ethereum (ETH/USDT)</MenuItem>
                  <MenuItem value="SOLUSDT">Solana (SOL/USDT)</MenuItem>
                  <MenuItem value="ADAUSDT">Cardano (ADA/USDT)</MenuItem>
                  <MenuItem value="DOTUSDT">Polkadot (DOT/USDT)</MenuItem>
                  <MenuItem value="AVAXUSDT">Avalanche (AVAX/USDT)</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={4}>
              <FormControl fullWidth size="small">
                <InputLabel>Timeframe</InputLabel>
                <Select
                  value={advancedBacktestConfig.timeframe}
                  onChange={(e) => setAdvancedBacktestConfig({
                    ...advancedBacktestConfig,
                    timeframe: e.target.value
                  })}
                  label="Timeframe"
                >
                  <MenuItem value="15m">15 minutes</MenuItem>
                  <MenuItem value="1h">1 hour</MenuItem>
                  <MenuItem value="4h">4 hours</MenuItem>
                  <MenuItem value="1d">1 day</MenuItem>
                  <MenuItem value="1w">1 week</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={4}>
              <FormControl fullWidth size="small">
                <InputLabel>ML Model Type</InputLabel>
                <Select
                  value={mlModelType}
                  onChange={(e) => setMlModelType(e.target.value)}
                  label="ML Model Type"
                >
                  <MenuItem value="ensemble">Ensemble (Recommended)</MenuItem>
                  <MenuItem value="lstm">LSTM Neural Network</MenuItem>
                  <MenuItem value="prophet">Prophet</MenuItem>
                  <MenuItem value="xgboost">XGBoost</MenuItem>
                  <MenuItem value="arima">ARIMA</MenuItem>
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        </Box>
        
        {mlLoadingPredictions ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
            <CircularProgress />
          </Box>
        ) : (
          <Grid container spacing={3}>
            {/* Price Predictions */}
            <Grid item xs={12} md={8}>
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <span>Price Predictions (Next 7 Days)</span>
                  {mlPredictions?.direction === 'up' && (
                    <Chip 
                      label="Bullish Forecast" 
                      color="success" 
                      size="small" 
                      icon={<TrendingUp />} 
                    />
                  )}
                  {mlPredictions?.direction === 'down' && (
                    <Chip 
                      label="Bearish Forecast" 
                      color="error" 
                      size="small" 
                      icon={<TrendingDown />} 
                    />
                  )}
                  {mlPredictions?.direction === 'sideways' && (
                    <Chip 
                      label="Sideways Forecast" 
                      color="warning" 
                      size="small" 
                      icon={<TrendingFlat />} 
                    />
                  )}
                </Typography>
                
                {mlPredictions ? (
                  <Box sx={{ height: 300 }}>
                    <ResponsiveContainer width="100%" height="100%">
                      <ComposedChart data={mlPredictions.chartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Area 
                          type="monotone" 
                          dataKey="upperBound" 
                          fill={theme.palette.primary.light} 
                          stroke="transparent" 
                          fillOpacity={0.2} 
                          name="Upper Range" 
                        />
                        <Area 
                          type="monotone" 
                          dataKey="lowerBound" 
                          fill={theme.palette.primary.light} 
                          stroke="transparent" 
                          fillOpacity={0.2} 
                          name="Lower Range" 
                        />
                        <Line 
                          type="monotone" 
                          dataKey="actual" 
                          stroke={theme.palette.success.main} 
                          dot={true} 
                          name="Actual Price"
                          strokeWidth={2} 
                        />
                        <Line 
                          type="monotone" 
                          dataKey="predicted" 
                          stroke={theme.palette.primary.main} 
                          strokeDasharray="5 5"
                          dot={true} 
                          name="Predicted Price" 
                          strokeWidth={2}
                        />
                      </ComposedChart>
                    </ResponsiveContainer>
                  </Box>
                ) : (
                  <Alert severity="info">
                    No prediction data available for {advancedBacktestConfig.symbol} on {advancedBacktestConfig.timeframe} timeframe
                  </Alert>
                )}
                
                {mlPredictions && (
                  <Box sx={{ mt: 2 }}>
                    <Grid container spacing={2}>
                      <Grid item xs={12} sm={4}>
                        <Box sx={{ p: 1, bgcolor: 'background.paper', borderRadius: 1 }}>
                          <Typography variant="caption" color="text.secondary" display="block">
                            Current Price
                          </Typography>
                          <Typography variant="h6">
                            ${mlPredictions.currentPrice.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={12} sm={4}>
                        <Box sx={{ p: 1, bgcolor: 'background.paper', borderRadius: 1 }}>
                          <Typography variant="caption" color="text.secondary" display="block">
                            7-Day Target
                          </Typography>
                          <Typography variant="h6" color={mlPredictions.priceChange > 0 ? 'success.main' : 'error.main'}>
                            ${mlPredictions.targetPrice.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={12} sm={4}>
                        <Box sx={{ p: 1, bgcolor: 'background.paper', borderRadius: 1 }}>
                          <Typography variant="caption" color="text.secondary" display="block">
                            Predicted Change
                          </Typography>
                          <Typography variant="h6" color={mlPredictions.priceChange > 0 ? 'success.main' : 'error.main'}>
                            {mlPredictions.priceChangePercent > 0 ? '+' : ''}{mlPredictions.priceChangePercent}%
                          </Typography>
                        </Box>
                      </Grid>
                    </Grid>
                    
                    <Box sx={{ mt: 2, p: 1, bgcolor: 'background.paper', borderRadius: 1 }}>
                      <Typography variant="caption" color="text.secondary" display="block">
                        Model Confidence
                      </Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box sx={{ width: '100%', mr: 1 }}>
                          <LinearProgress 
                            variant="determinate" 
                            value={mlPredictions.confidence * 100} 
                            sx={{
                              height: 10,
                              borderRadius: 5,
                              '& .MuiLinearProgress-bar': {
                                backgroundColor: mlPredictions.confidence > 0.7 ? 'success.main' :
                                                 mlPredictions.confidence > 0.5 ? 'warning.main' : 'error.main'
                              }
                            }}
                          />
                        </Box>
                        <Box sx={{ minWidth: 35 }}>
                          <Typography variant="body2" color="text.secondary">
                            {(mlPredictions.confidence * 100).toFixed(0)}%
                          </Typography>
                        </Box>
                      </Box>
                    </Box>
                  </Box>
                )}
              </Paper>
            </Grid>
            
            {/* Market Regime & Anomalies */}
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>
                  Market Regime Analysis
                </Typography>
                
                {marketRegime ? (
                  <>
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="subtitle2" gutterBottom>
                        Current Regime:
                      </Typography>
                      <Chip 
                        label={marketRegime.regime} 
                        color={
                          marketRegime.regime === 'Trending' ? 'primary' :
                          marketRegime.regime === 'Ranging' ? 'success' :
                          marketRegime.regime === 'Volatile' ? 'warning' : 'default'
                        }
                        sx={{ fontWeight: 'bold', fontSize: '1rem' }} 
                      />
                    </Box>
                    
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="subtitle2" gutterBottom>
                        Direction:
                      </Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {marketRegime.direction === 'Bullish' && <TrendingUp color="success" sx={{ mr: 1 }} />}
                        {marketRegime.direction === 'Bearish' && <TrendingDown color="error" sx={{ mr: 1 }} />}
                        {marketRegime.direction === 'Sideways' && <TrendingFlat color="warning" sx={{ mr: 1 }} />}
                        <Typography>
                          {marketRegime.direction}
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="subtitle2" gutterBottom>
                        Volatility:
                      </Typography>
                      <Rating 
                        value={marketRegime.volatilityLevel} 
                        max={5} 
                        readOnly 
                        icon={<Timeline sx={{ color: theme.palette.warning.main }} />} 
                        emptyIcon={<Timeline sx={{ color: theme.palette.grey[300] }} />}
                      />
                    </Box>
                    
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="subtitle2" gutterBottom>
                        Trading Regime Duration:
                      </Typography>
                      <Typography variant="body1">
                        {marketRegime.duration} days
                      </Typography>
                    </Box>
                    
                    <Box>
                      <Typography variant="subtitle2" gutterBottom>
                        Recommended Strategies:
                      </Typography>
                      {marketRegime.recommendedStrategies.map((strategy, index) => (
                        <Chip 
                          key={index} 
                          label={strategy} 
                          sx={{ mr: 0.5, mb: 0.5 }} 
                          size="small" 
                          variant="outlined"
                        />
                      ))}
                    </Box>
                  </>
                ) : (
                  <Alert severity="info">
                    No market regime data available
                  </Alert>
                )}
              </Paper>
              
              <Paper sx={{ p: 2 }}>
                <Typography variant="h6" gutterBottom>
                  Market Anomalies
                </Typography>
                
                {marketAnomalies && marketAnomalies.length > 0 ? (
                  <List dense>
                    {marketAnomalies.map((anomaly, index) => (
                      <ListItem key={index} divider={index < marketAnomalies.length - 1}>
                        <ListItemIcon>
                          {anomaly.severity === 'high' && <Warning color="error" />}
                          {anomaly.severity === 'medium' && <Warning color="warning" />}
                          {anomaly.severity === 'low' && <Info color="info" />}
                        </ListItemIcon>
                        <ListItemText 
                          primary={anomaly.type} 
                          secondary={
                            <>
                              <Typography variant="body2" component="span">
                                {anomaly.description}
                              </Typography>
                              <Typography variant="caption" display="block" color="text.secondary">
                                Detected: {new Date(anomaly.detectedAt).toLocaleString()}
                              </Typography>
                            </>
                          }
                        />
                      </ListItem>
                    ))}
                  </List>
                ) : (
                  <Alert severity="success">
                    No anomalies detected in current market conditions
                  </Alert>
                )}
              </Paper>
            </Grid>
          </Grid>
        )}
      </Box>
    );
  };

  // Render risk management tab
  const renderRiskManagementTab = () => {
    return (
      <Box sx={{ py: 2 }}>
        <Typography variant="h5" gutterBottom>
          Risk Management
        </Typography>
        
        {portfolioRiskAnalysis ? (
          <RiskManagement 
            portfolioData={bots.filter(bot => bot.active)} 
            portfolioRiskAnalysis={portfolioRiskAnalysis}
            valueAtRisk={valueAtRisk}
            selectedRiskProfile={selectedRiskProfile}
            setSelectedRiskProfile={setSelectedRiskProfile}
            riskScenario={riskScenario}
            setRiskScenario={setRiskScenario}
            stressTestResults={stressTestResults}
            hedgingRecommendations={hedgingRecommendations}
          />
        ) : (
          bots.filter(bot => bot.active).length === 0 ? (
            <Alert severity="info" sx={{ mt: 2 }}>
              You don't have any active bots. Please activate at least one bot to see risk analysis.
            </Alert>
          ) : (
            <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
              <CircularProgress />
            </Box>
          )
        )}
      </Box>
    );
  };

  // Render settings tab
  const renderSettingsTab = () => {
    return <TradingBotsSettingsTab setError={setError} />;
  };

  // Render the main component with responsive design
  return (
    <Box sx={{ width: '100%' }}>
      {/* Top Action Bar */}
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          mb: 2,
          flexWrap: 'wrap',
          gap: 1
        }}
      >
        <Box>
          <Typography variant="h4" component="h1" gutterBottom>
            Trading Bots
          </Typography>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
          {/* Button to open AI suggestions */}
          <Button
            variant="outlined"
            startIcon={<TrendingUp />}
            onClick={() => setIsAiSuggestionsOpen(true)}
            sx={{ display: { xs: 'none', sm: 'flex' } }}
          >
            AI Strategy Suggestions
          </Button>
          
          {/* Mobile version - icon only */}
          <IconButton
            color="primary"
            onClick={() => setIsAiSuggestionsOpen(true)}
            sx={{ display: { xs: 'flex', sm: 'none' } }}
          >
            <TrendingUp />
          </IconButton>
          
          {/* Button to create new bot */}
          <Button
            variant="contained"
            startIcon={<Add />}
            onClick={() => {
              setIsCreatingBot(true);
              setIsEditingBot(false);
              setNewBotConfig({
                name: '',
                description: '',
                strategy: '',
                symbol: 'BTCUSDT',
                allocation: 10,
                riskLevel: 'medium',
                parameters: {},
                enabled: false,
                riskControls: {
                  maxDrawdown: 15,
                  stopLoss: 5,
                  takeProfit: 10,
                  trailingStop: false,
                  trailingStopPercent: 2,
                  maxDailyTrades: 10,
                  maxOpenTrades: 3,
                  maxDailyLoss: 5
                }
              });
            }}
            sx={{ display: { xs: 'none', sm: 'flex' } }}
          >
            Create Bot
          </Button>
          
          {/* Mobile version - icon only */}
          <IconButton
            color="primary"
            onClick={() => {
              setIsCreatingBot(true);
              setIsEditingBot(false);
              setNewBotConfig({
                name: '',
                description: '',
                strategy: '',
                symbol: 'BTCUSDT',
                allocation: 10,
                riskLevel: 'medium',
                parameters: {},
                enabled: false,
                riskControls: {
                  maxDrawdown: 15,
                  stopLoss: 5,
                  takeProfit: 10,
                  trailingStop: false,
                  trailingStopPercent: 2,
                  maxDailyTrades: 10,
                  maxOpenTrades: 3,
                  maxDailyLoss: 5
                }
              });
            }}
            sx={{ display: { xs: 'flex', sm: 'none' } }}
          >
            <Add />
          </IconButton>
          
          {/* Notifications button */}
          <IconButton
            color="default"
            onClick={() => setIsNotificationsOpen(true)}
          >
            <Badge badgeContent={unreadNotifications} color="error">
              <NotificationsActive />
            </Badge>
          </IconButton>
        </Box>
      </Box>
      
      {/* Tabs Navigation */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
          aria-label="trading bot tabs"
        >
          <Tab label="My Bots" icon={<Dashboard />} iconPosition="start" />
          <Tab label="Backtest" icon={<Assessment />} iconPosition="start" />
          <Tab label="Portfolio" icon={<AccountBalance />} iconPosition="start" />
          <Tab label="Social" icon={<Share />} iconPosition="start" />
          <Tab label="News & Sentiment" icon={<Info />} iconPosition="start" />
          <Tab label="ML Predictions" icon={<TrendingUp />} iconPosition="start" />
          <Tab label="Risk Management" icon={<Security />} iconPosition="start" />
          <Tab label="Settings" icon={<Settings />} iconPosition="start" />
        </Tabs>
      </Box>
      
      {/* Error Alert */}
      {error && (
        <Alert severity="error" sx={{ mt: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}
      
      {/* Loading State */}
      {loading && tabValue === 0 && (
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <CircularProgress />
        </Box>
      )}
      
      {/* Content based on selected tab */}
      <Box sx={{ mt: 2, p: 1 }}>
        {/* Tab 0: My Bots */}
        {tabValue === 0 && !loading && (
          <Box>
            {/* Bots Filter and Sort Controls */}
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              mb: 2,
              flexWrap: 'wrap',
              gap: 1
            }}>
              <ToggleButtonGroup
                value={botFilterValue}
                exclusive
                onChange={(e, newValue) => {
                  if (newValue) setBotFilterValue(newValue);
                }}
                size="small"
              >
                <ToggleButton value="all">All</ToggleButton>
                <ToggleButton value="active">Active</ToggleButton>
                <ToggleButton value="inactive">Inactive</ToggleButton>
                <ToggleButton value="favorites">Favorites</ToggleButton>
              </ToggleButtonGroup>
              
              <FormControl sx={{ minWidth: 150 }} size="small">
                <InputLabel>Sort By</InputLabel>
                <Select
                  value={botSortOption}
                  onChange={(e) => setBotSortOption(e.target.value)}
                  label="Sort By"
                >
                  <MenuItem value="performance">Performance</MenuItem>
                  <MenuItem value="name">Name</MenuItem>
                  <MenuItem value="recent">Recent</MenuItem>
                  <MenuItem value="allocation">Allocation</MenuItem>
                </Select>
              </FormControl>
            </Box>
            
            {/* Compare Bots View */}
            {isComparingBots && comparisonBots.length > 0 && (
              <Paper sx={{ p: 2, mb: 3 }}>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'space-between', 
                  alignItems: 'center',
                  mb: 2
                }}>
                  <Typography variant="h6">
                    Bot Comparison
                  </Typography>
                  <Button 
                    size="small" 
                    startIcon={<Close />}
                    onClick={() => {
                      setIsComparingBots(false);
                      setComparisonBots([]);
                    }}
                  >
                    Close Comparison
                  </Button>
                </Box>
                
                <Box sx={{ height: 300, mb: 2 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="time" />
                      <YAxis />
                      <RechartsTooltip />
                      <Legend />
                      
                      {comparisonBots.map((bot, index) => (
                        <Line
                          key={bot.id}
                          data={bot.performance?.data || []}
                          type="monotone"
                          dataKey="value"
                          name={bot.name}
                          stroke={[
                            theme.palette.primary.main,
                            theme.palette.secondary.main,
                            theme.palette.success.main,
                          ][index % 3]}
                          strokeWidth={2}
                          dot={false}
                          activeDot={{ r: 6 }}
                        />
                      ))}
                    </LineChart>
                  </ResponsiveContainer>
                </Box>
                
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Bot Name</TableCell>
                        <TableCell align="right">Return (%)</TableCell>
                        <TableCell align="right">Win Rate</TableCell>
                        <TableCell align="right">Drawdown</TableCell>
                        <TableCell align="right">Sharpe</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {comparisonBots.map((bot) => (
                        <TableRow key={bot.id}>
                          <TableCell>{bot.name}</TableCell>
                          <TableCell align="right" sx={{ 
                            color: (bot.stats?.totalReturn || 0) >= 0 ? 'success.main' : 'error.main' 
                          }}>
                            {(bot.stats?.totalReturn || 0) >= 0 ? '+' : ''}
                            {(bot.stats?.totalReturn || 0).toFixed(2)}%
                          </TableCell>
                          <TableCell align="right">
                            {(bot.stats?.winRate || 0).toFixed(2)}%
                          </TableCell>
                          <TableCell align="right" sx={{ color: 'error.main' }}>
                            {(bot.stats?.maxDrawdown || 0).toFixed(2)}%
                          </TableCell>
                          <TableCell align="right">
                            {(bot.stats?.sharpeRatio || 0).toFixed(2)}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            )}
            
            {/* Portfolio View */}
            {isViewingPortfolio && portfolioPerformance && (
              <Paper sx={{ p: 2, mb: 3 }}>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'space-between', 
                  alignItems: 'center',
                  mb: 2
                }}>
                  <Typography variant="h6">
                    Portfolio Performance
                  </Typography>
                  <Button 
                    size="small" 
                    startIcon={<Close />}
                    onClick={() => setIsViewingPortfolio(false)}
                  >
                    Close Portfolio View
                  </Button>
                </Box>
                
                <Grid container spacing={2} sx={{ mb: 3 }}>
                  <Grid item xs={6} sm={3}>
                    <Typography variant="caption" color="text.secondary">
                      Total Value
                    </Typography>
                    <Typography variant="h5">
                      ${portfolioPerformance.totalValue.toLocaleString()}
                    </Typography>
                  </Grid>
                  <Grid item xs={6} sm={3}>
                    <Typography variant="caption" color="text.secondary">
                      Total Return
                    </Typography>
                    <Typography variant="h5" color={portfolioPerformance.totalReturn >= 0 ? 'success.main' : 'error.main'}>
                      {portfolioPerformance.totalReturn >= 0 ? '+' : ''}
                      {portfolioPerformance.totalReturn.toFixed(2)}%
                    </Typography>
                  </Grid>
                  <Grid item xs={6} sm={3}>
                    <Typography variant="caption" color="text.secondary">
                      Active Bots
                    </Typography>
                    <Typography variant="h5">
                      {portfolioPerformance.activeBots}
                    </Typography>
                  </Grid>
                  <Grid item xs={6} sm={3}>
                    <Typography variant="caption" color="text.secondary">
                      Open Positions
                    </Typography>
                    <Typography variant="h5">
                      {portfolioPerformance.openPositions}
                    </Typography>
                  </Grid>
                </Grid>
                
                <Grid container spacing={3}>
                  <Grid item xs={12} md={8}>
                    <Typography variant="subtitle2" gutterBottom>
                      Performance Chart
                    </Typography>
                    <Box sx={{ height: 250 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <AreaChart data={portfolioPerformance.performanceData}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="time" />
                          <YAxis />
                          <RechartsTooltip />
                          <Area 
                            type="monotone" 
                            dataKey="value" 
                            stroke={theme.palette.primary.main}
                            fill={theme.palette.primary.main}
                            fillOpacity={0.2}
                          />
                        </AreaChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle2" gutterBottom>
                      Asset Allocation
                    </Typography>
                    <Box sx={{ height: 250 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={portfolioPerformance.assetAllocation}
                            innerRadius={60}
                            outerRadius={80}
                            paddingAngle={5}
                            dataKey="value"
                            nameKey="asset"
                            label
                          >
                            {portfolioPerformance.assetAllocation.map((entry, index) => (
                              <Cell 
                                key={`cell-${index}`} 
                                fill={[
                                  theme.palette.primary.main,
                                  theme.palette.secondary.main,
                                  theme.palette.success.main,
                                  theme.palette.warning.main,
                                  theme.palette.error.main,
                                  theme.palette.info.main,
                                ][index % 6]} 
                              />
                            ))}
                          </Pie>
                          <RechartsTooltip />
                          <Legend />
                        </PieChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                </Grid>
              </Paper>
            )}
            
            {/* Bot Cards Grid */}
            <Grid container spacing={2}>
              {/* Filtered and sorted bot grid */}
              {bots.filter(bot => {
                if (botFilterValue === 'all') return true;
                if (botFilterValue === 'active') return bot.active;
                if (botFilterValue === 'inactive') return !bot.active;
                if (botFilterValue === 'favorites') return favoriteBotsIds.includes(bot.id);
                return true;
              })
              .sort((a, b) => {
                if (botSortOption === 'performance') {
                  return (b.stats?.totalReturn || 0) - (a.stats?.totalReturn || 0);
                }
                if (botSortOption === 'name') {
                  return a.name.localeCompare(b.name);
                }
                if (botSortOption === 'recent') {
                  return new Date(b.lastModified) - new Date(a.lastModified);
                }
                if (botSortOption === 'allocation') {
                  return b.allocation - a.allocation;
                }
                return 0;
              })
              .map((bot) => (
                <Grid item xs={12} sm={6} md={4} key={bot.id}>
                  <Card 
                    variant="outlined"
                    sx={{ 
                      height: '100%',
                      display: 'flex',
                      flexDirection: 'column',
                      position: 'relative'
                    }}
                  >
                    {/* Favorite button */}
                    <IconButton 
                      sx={{ 
                        position: 'absolute', 
                        top: 5, 
                        right: 5,
                        zIndex: 1
                      }}
                      onClick={() => {
                        const newFavorites = favoriteBotsIds.includes(bot.id)
                          ? favoriteBotsIds.filter(id => id !== bot.id)
                          : [...favoriteBotsIds, bot.id];
                        
                        setFavoriteBotsIds(newFavorites);
                        localStorage.setItem('favoriteBots', JSON.stringify(newFavorites));
                      }}
                    >
                      {favoriteBotsIds.includes(bot.id) ? (
                        <Favorite color="primary" />
                      ) : (
                        <FavoriteBorder />
                      )}
                    </IconButton>
                    
                    <CardHeader
                      title={bot.name}
                      subheader={`${bot.strategy} • ${bot.symbol}`}
                      action={
                        <Chip 
                          label={bot.active ? 'Active' : 'Inactive'} 
                          color={bot.active ? 'success' : 'default'}
                          size="small"
                        />
                      }
                      sx={{ pb: 0 }}
                    />
                    <CardContent sx={{ pt: 1, flexGrow: 1 }}>
                      {/* Quick stats */}
                      <Box sx={{ mb: 1 }}>
                        <Grid container spacing={1}>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              Performance
                            </Typography>
                            <Typography variant="body1" color={bot.stats?.totalReturn >= 0 ? 'success.main' : 'error.main'}>
                              {bot.stats?.totalReturn >= 0 ? '+' : ''}
                              {bot.stats?.totalReturn?.toFixed(2) || '0.00'}%
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="caption" color="text.secondary">
                              Allocation
                            </Typography>
                            <Typography variant="body1">
                              {bot.allocation}%
                              <LinearProgress 
                                variant="determinate" 
                                value={bot.allocation} 
                                sx={{ height: 4, mt: 0.5 }} 
                              />
                            </Typography>
                          </Grid>
                        </Grid>
                      </Box>
                      
                      {/* Performance mini chart */}
                      <Box sx={{ height: 40, mt: 1, mb: 1 }}>
                        {bot.performance?.data ? (
                          <ResponsiveContainer width="100%" height="100%">
                            <LineChart data={bot.performance.data}>
                              <Line 
                                type="monotone" 
                                dataKey="value" 
                                stroke={bot.stats?.totalReturn >= 0 ? '#4caf50' : '#f44336'} 
                                strokeWidth={1.5}
                                dot={false}
                              />
                            </LineChart>
                          </ResponsiveContainer>
                        ) : (
                          <Box sx={{ 
                            height: '100%', 
                            display: 'flex', 
                            alignItems: 'center', 
                            justifyContent: 'center' 
                          }}>
                            <Typography variant="caption" color="text.disabled">
                              No performance data
                            </Typography>
                          </Box>
                        )}
                      </Box>
                      
                      {/* Risk level indicator */}
                      <Box sx={{ mb: 1.5 }}>
                        <Typography variant="caption" color="text.secondary" display="block">
                          Risk Level: {bot.riskLevel.charAt(0).toUpperCase() + bot.riskLevel.slice(1)}
                        </Typography>
                        <LinearProgress 
                          variant="determinate" 
                          value={
                            bot.riskLevel === 'low' ? 33 :
                            bot.riskLevel === 'medium' ? 66 : 100
                          }
                          color={
                            bot.riskLevel === 'low' ? 'success' :
                            bot.riskLevel === 'medium' ? 'warning' : 'error'
                          }
                          sx={{ height: 4, mt: 0.5 }} 
                        />
                      </Box>
                      
                      {/* Last trade */}
                      {bot.lastTrade && (
                        <Box sx={{ 
                          display: 'flex', 
                          alignItems: 'center',
                          bgcolor: 'action.hover',
                          borderRadius: 1,
                          p: 0.75,
                          mt: 1
                        }}>
                          {bot.lastTrade.type === 'buy' ? (
                            <TrendingUp fontSize="small" color="success" sx={{ mr: 1 }} />
                          ) : (
                            <TrendingDown fontSize="small" color="error" sx={{ mr: 1 }} />
                          )}
                          <Box>
                            <Typography variant="caption" display="block">
                              Last: {bot.lastTrade.type.toUpperCase()} {bot.lastTrade.price}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {new Date(bot.lastTrade.time).toLocaleString()}
                            </Typography>
                          </Box>
                        </Box>
                      )}
                    </CardContent>
                    <CardActions sx={{ borderTop: 1, borderColor: 'divider', px: 2 }}>
                      <ButtonGroup size="small">
                        <Tooltip title="View Details">
                          <Button onClick={() => setSelectedBot(bot.id)}>
                            <Visibility fontSize="small" />
                          </Button>
                        </Tooltip>
                        <Tooltip title={bot.active ? "Stop Bot" : "Start Bot"}>
                          <Button 
                            color={bot.active ? 'error' : 'success'}
                            onClick={async () => {
                              try {
                                if (bot.active) {
                                  await TradingBotService.stopBot(bot.id);
                                } else {
                                  await TradingBotService.startBot(bot.id);
                                }
                                
                                // Update bot status in the list
                                setBots(prev => 
                                  prev.map(b => 
                                    b.id === bot.id ? { ...b, active: !b.active } : b
                                  )
                                );
                              } catch (err) {
                                setError(`Failed to ${bot.active ? 'stop' : 'start'} bot: ${err.message}`);
                              }
                            }}
                          >
                            {bot.active ? <Stop fontSize="small" /> : <PlayArrow fontSize="small" />}
                          </Button>
                        </Tooltip>
                        <Tooltip title="Edit Bot">
                          <Button 
                            onClick={() => {
                              setIsEditingBot(true);
                              setIsCreatingBot(false);
                              setNewBotConfig({
                                id: bot.id,
                                name: bot.name,
                                description: bot.description || '',
                                strategy: bot.strategy,
                                symbol: bot.symbol,
                                allocation: bot.allocation,
                                riskLevel: bot.riskLevel,
                                parameters: bot.parameters || {},
                                riskControls: bot.riskControls || {
                                  maxDrawdown: 15,
                                  stopLoss: 5,
                                  takeProfit: 10,
                                  trailingStop: false,
                                  trailingStopPercent: 2,
                                  maxDailyTrades: 10,
                                  maxOpenTrades: 3,
                                  maxDailyLoss: 5
                                }
                              });
                            }}
                          >
                            <Edit fontSize="small" />
                          </Button>
                        </Tooltip>
                        <Tooltip title="Compare Bot">
                          <Button
                            onClick={async () => {
                              try {
                                if (comparisonBots.length >= 3) {
                                  setError('You can compare up to 3 bots at a time.');
                                  return;
                                }
                                
                                if (comparisonBots.some(b => b.id === bot.id)) {
                                  // Already in comparison, remove it
                                  setComparisonBots(prev => prev.filter(b => b.id !== bot.id));
                                } else {
                                  // Fetch additional data needed for comparison
                                  const botDetails = await TradingBotService.getBotDetails(bot.id);
                                  const botPerformance = await TradingBotService.getBotPerformance(bot.id, performancePeriod);
                                  const botStats = await TradingBotService.getBotStats(bot.id);
                                  
                                  setComparisonBots(prev => [
                                    ...prev, 
                                    { 
                                      ...bot, 
                                      details: botDetails,
                                      performance: botPerformance,
                                      stats: botStats
                                    }
                                  ]);
                                  
                                  setIsComparingBots(true);
                                }
                              } catch (err) {
                                setError(`Failed to load comparison data: ${err.message}`);
                              }
                            }}
                            color={comparisonBots.some(b => b.id === bot.id) ? 'primary' : 'default'}
                          >
                            <CompareArrows fontSize="small" />
                          </Button>
                        </Tooltip>
                      </ButtonGroup>
                    </CardActions>
                  </Card>
                </Grid>
              ))}
            </Grid>
            
            {bots.length === 0 && !loading && (
              <Box sx={{ textAlign: 'center', py: 4 }}>
                <Paper sx={{ p: 3, maxWidth: 500, mx: 'auto' }}>
                  <Typography variant="h6" gutterBottom>
                    No trading bots yet
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    Create your first trading bot to start automated trading.
                  </Typography>
                  <Button 
                    variant="contained" 
                    startIcon={<Add />} 
                    onClick={() => {
                      setIsCreatingBot(true);
                      setIsEditingBot(false);
                    }}
                  >
                    Create Your First Bot
                  </Button>
                </Paper>
              </Box>
            )}
          </Box>
        )}
        
        {/* Tab 1: Backtesting */}
        {tabValue === 1 && renderAdvancedBacktestTab()}
        
        {/* Tab 2: Portfolio */}
        {tabValue === 2 && renderPortfolioView()}
        
        {/* Tab 3: Social Trading */}
        {tabValue === 3 && renderSocialTradingTab()}
        
        {/* Tab 4: News & Sentiment */}
        {tabValue === 4 && renderNewsAndSentimentTab()}
        
        {/* Tab 5: ML Predictions */}
        {tabValue === 5 && renderMlPredictionsTab()}
        
        {/* Tab 6: Risk Management */}
        {tabValue === 6 && renderRiskManagementTab()}
        
        {/* Tab 7: Settings */}
        {tabValue === 7 && renderSettingsTab()}
      </Box>
    </Box>
  );
};

export default TradingBots;
