{"ast":null,"code":"import api from './api';\n\n// Base API URL\nconst API_BASE = '/v1';\nclass TradingService {\n  async getAllStrategies() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/strategies`);\n      return response.data.strategies;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getUserStrategies() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/user-strategies`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getStrategyById(strategyId) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/user-strategies/${strategyId}`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async createUserStrategy(strategyData) {\n    try {\n      const response = await api.post(`${API_BASE}/trading/user-strategies`, strategyData);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async updateUserStrategy(strategyId, strategyData) {\n    try {\n      const response = await api.put(`${API_BASE}/trading/user-strategies/${strategyId}`, strategyData);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async deleteUserStrategy(strategyId) {\n    try {\n      await api.delete(`${API_BASE}/trading/user-strategies/${strategyId}`);\n      return true;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async startStrategy(strategyId) {\n    try {\n      const response = await api.post(`${API_BASE}/trading/user-strategies/${strategyId}/start`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async stopStrategy(strategyId) {\n    try {\n      const response = await api.post(`${API_BASE}/trading/user-strategies/${strategyId}/stop`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async backtestStrategy(backtestData) {\n    try {\n      const response = await api.post(`${API_BASE}/trading/backtest`, backtestData);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getBacktestResult(backtestId) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/backtest/${backtestId}`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getTradingHistory(filters = {}) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/history`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getStrategyPerformance(strategyId) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/user-strategies/${strategyId}/performance`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getDistributorCommissions(period, dateRange = null, tier = null) {\n    try {\n      const params = {\n        period\n      };\n      if (dateRange) {\n        params.startDate = dateRange.startDate;\n        params.endDate = dateRange.endDate;\n      }\n      if (tier !== null) {\n        params.tier = tier;\n      }\n      const response = await api.get(`${API_BASE}/distributor/commissions`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getDistributorNetwork(depth = 3, userId = null) {\n    try {\n      const params = {\n        depth\n      };\n      if (userId) {\n        params.userId = userId;\n      }\n      const response = await api.get(`${API_BASE}/distributor/network`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getDistributorStats(period = '1month', userId = null) {\n    try {\n      const params = {\n        period\n      };\n      if (userId) {\n        params.userId = userId;\n      }\n      const response = await api.get(`${API_BASE}/distributor/stats`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getDistributorReferrals(status = 'all', page = 1, limit = 20) {\n    try {\n      const params = {\n        status,\n        page,\n        limit\n      };\n      const response = await api.get(`${API_BASE}/distributor/referrals`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getDashboardData(period = '24h') {\n    try {\n      const response = await api.get(`${API_BASE}/trading/dashboard`, {\n        params: {\n          period\n        }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getDashboardPerformance(period = '1month') {\n    try {\n      const response = await api.get(`${API_BASE}/trading/dashboard/performance`, {\n        params: {\n          period\n        }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getDashboardAlerts() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/dashboard/alerts`);\n      return response.data.alerts;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getMarketData(limit = 100, sortBy = 'marketCap', order = 'desc') {\n    try {\n      const response = await api.get(`${API_BASE}/trading/market-data`, {\n        params: {\n          limit,\n          sortBy,\n          order\n        }\n      });\n      return response.data.cryptocurrencies;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getExchangeMarketData(exchangeId, symbol) {\n    try {\n      const response = await api.get(`${API_BASE}/exchanges/${exchangeId}/market-data`, {\n        params: {\n          symbol\n        }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getPortfolioSummary() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/portfolio/summary`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getPortfolioPerformance(period = '1month') {\n    try {\n      const response = await api.get(`${API_BASE}/trading/portfolio/performance`, {\n        params: {\n          period\n        }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getPortfolioAssets() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/portfolio/assets`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getOrderBookData(symbol, depth = 10) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/orderbook`, {\n        params: {\n          symbol,\n          depth\n        }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getRecentTrades(symbol, limit = 50) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/recent-trades`, {\n        params: {\n          symbol,\n          limit\n        }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getTechnicalIndicators(symbol, timeframe = '1d', indicators = ['sma', 'ema', 'rsi']) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/technical-indicators`, {\n        params: {\n          symbol,\n          timeframe,\n          indicators: indicators.join(',')\n        }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getAvailableTimeframes() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/timeframes`);\n      return response.data.timeframes;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getAvailableIndicators() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/indicators`);\n      return response.data.indicators;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getChartData(symbol, timeframe = '1h', from = null, to = null) {\n    try {\n      const params = {\n        symbol,\n        timeframe\n      };\n      if (from) params.from = from;\n      if (to) params.to = to;\n      const response = await api.get(`${API_BASE}/trading/chart-data`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getMultiExchangePairs() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/exchange-pairs`);\n      return response.data.pairs;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getArbitrageOpportunities(minSpreadPercentage = 0.5) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/arbitrage`, {\n        params: {\n          minSpreadPercentage\n        }\n      });\n      return response.data.opportunities;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getCommissionTiers() {\n    try {\n      const response = await api.get(`${API_BASE}/distributor/commission-tiers`);\n      return response.data.tiers;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async getCommissionCalculator(amount, tier = null) {\n    try {\n      const params = {\n        amount\n      };\n      if (tier !== null) params.tier = tier;\n      const response = await api.get(`${API_BASE}/distributor/commission-calculator`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  async generateReferralLink() {\n    try {\n      const response = await api.post(`${API_BASE}/distributor/referral-link`);\n      return response.data.referralLink;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  _handleError(error) {\n    let errorMessage = 'An unexpected error occurred';\n    if (error.response) {\n      const {\n        status,\n        data\n      } = error.response;\n      if (data.message) {\n        errorMessage = data.message;\n      } else if (status === 404) {\n        errorMessage = 'The requested resource was not found.';\n      } else if (status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      }\n    } else if (error.request) {\n      errorMessage = 'No response received from server. Please check your connection.';\n    }\n    throw new Error(errorMessage);\n  }\n}\nexport default new TradingService();","map":{"version":3,"names":["api","API_BASE","TradingService","getAllStrategies","response","get","data","strategies","error","_handleError","getUserStrategies","getStrategyById","strategyId","createUserStrategy","strategyData","post","updateUserStrategy","put","deleteUserStrategy","delete","startStrategy","stopStrategy","backtestStrategy","backtestData","getBacktestResult","backtestId","getTradingHistory","filters","params","getStrategyPerformance","getDistributorCommissions","period","dateRange","tier","startDate","endDate","getDistributorNetwork","depth","userId","getDistributorStats","getDistributorReferrals","status","page","limit","getDashboardData","getDashboardPerformance","getDashboardAlerts","alerts","getMarketData","sortBy","order","cryptocurrencies","getExchangeMarketData","exchangeId","symbol","getPortfolioSummary","getPortfolioPerformance","getPortfolioAssets","getOrderBookData","getRecentTrades","getTechnicalIndicators","timeframe","indicators","join","getAvailableTimeframes","timeframes","getAvailableIndicators","getChartData","from","to","getMultiExchangePairs","pairs","getArbitrageOpportunities","minSpreadPercentage","opportunities","getCommissionTiers","tiers","getCommissionCalculator","amount","generateReferralLink","referralLink","errorMessage","message","request","Error"],"sources":["/Users/antenehtessema/Desktop/botsalgo/web_dashboard/src/services/TradingService.js"],"sourcesContent":["import api from './api';\n\n// Base API URL\nconst API_BASE = '/v1';\n\nclass TradingService {\n  async getAllStrategies() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/strategies`);\n      return response.data.strategies;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getUserStrategies() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/user-strategies`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getStrategyById(strategyId) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/user-strategies/${strategyId}`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async createUserStrategy(strategyData) {\n    try {\n      const response = await api.post(`${API_BASE}/trading/user-strategies`, strategyData);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async updateUserStrategy(strategyId, strategyData) {\n    try {\n      const response = await api.put(`${API_BASE}/trading/user-strategies/${strategyId}`, strategyData);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async deleteUserStrategy(strategyId) {\n    try {\n      await api.delete(`${API_BASE}/trading/user-strategies/${strategyId}`);\n      return true;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async startStrategy(strategyId) {\n    try {\n      const response = await api.post(`${API_BASE}/trading/user-strategies/${strategyId}/start`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async stopStrategy(strategyId) {\n    try {\n      const response = await api.post(`${API_BASE}/trading/user-strategies/${strategyId}/stop`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async backtestStrategy(backtestData) {\n    try {\n      const response = await api.post(`${API_BASE}/trading/backtest`, backtestData);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getBacktestResult(backtestId) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/backtest/${backtestId}`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getTradingHistory(filters = {}) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/history`, { params: filters });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getStrategyPerformance(strategyId) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/user-strategies/${strategyId}/performance`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getDistributorCommissions(period, dateRange = null, tier = null) {\n    try {\n      const params = { period };\n      \n      if (dateRange) {\n        params.startDate = dateRange.startDate;\n        params.endDate = dateRange.endDate;\n      }\n      \n      if (tier !== null) {\n        params.tier = tier;\n      }\n      \n      const response = await api.get(`${API_BASE}/distributor/commissions`, { params });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getDistributorNetwork(depth = 3, userId = null) {\n    try {\n      const params = { depth };\n      if (userId) {\n        params.userId = userId;\n      }\n      \n      const response = await api.get(`${API_BASE}/distributor/network`, { params });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getDistributorStats(period = '1month', userId = null) {\n    try {\n      const params = { period };\n      if (userId) {\n        params.userId = userId;\n      }\n      \n      const response = await api.get(`${API_BASE}/distributor/stats`, { params });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getDistributorReferrals(status = 'all', page = 1, limit = 20) {\n    try {\n      const params = { status, page, limit };\n      const response = await api.get(`${API_BASE}/distributor/referrals`, { params });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getDashboardData(period = '24h') {\n    try {\n      const response = await api.get(`${API_BASE}/trading/dashboard`, { params: { period } });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getDashboardPerformance(period = '1month') {\n    try {\n      const response = await api.get(`${API_BASE}/trading/dashboard/performance`, { params: { period } });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getDashboardAlerts() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/dashboard/alerts`);\n      return response.data.alerts;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n\n  async getMarketData(limit = 100, sortBy = 'marketCap', order = 'desc') {\n    try {\n      const response = await api.get(`${API_BASE}/trading/market-data`, { \n        params: { limit, sortBy, order } \n      });\n      return response.data.cryptocurrencies;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getExchangeMarketData(exchangeId, symbol) {\n    try {\n      const response = await api.get(`${API_BASE}/exchanges/${exchangeId}/market-data`, {\n        params: { symbol }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getPortfolioSummary() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/portfolio/summary`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getPortfolioPerformance(period = '1month') {\n    try {\n      const response = await api.get(`${API_BASE}/trading/portfolio/performance`, {\n        params: { period }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getPortfolioAssets() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/portfolio/assets`);\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getOrderBookData(symbol, depth = 10) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/orderbook`, {\n        params: { symbol, depth }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getRecentTrades(symbol, limit = 50) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/recent-trades`, {\n        params: { symbol, limit }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getTechnicalIndicators(symbol, timeframe = '1d', indicators = ['sma', 'ema', 'rsi']) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/technical-indicators`, {\n        params: { symbol, timeframe, indicators: indicators.join(',') }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getAvailableTimeframes() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/timeframes`);\n      return response.data.timeframes;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getAvailableIndicators() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/indicators`);\n      return response.data.indicators;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getChartData(symbol, timeframe = '1h', from = null, to = null) {\n    try {\n      const params = { symbol, timeframe };\n      \n      if (from) params.from = from;\n      if (to) params.to = to;\n      \n      const response = await api.get(`${API_BASE}/trading/chart-data`, { params });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getMultiExchangePairs() {\n    try {\n      const response = await api.get(`${API_BASE}/trading/exchange-pairs`);\n      return response.data.pairs;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getArbitrageOpportunities(minSpreadPercentage = 0.5) {\n    try {\n      const response = await api.get(`${API_BASE}/trading/arbitrage`, { \n        params: { minSpreadPercentage } \n      });\n      return response.data.opportunities;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getCommissionTiers() {\n    try {\n      const response = await api.get(`${API_BASE}/distributor/commission-tiers`);\n      return response.data.tiers;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async getCommissionCalculator(amount, tier = null) {\n    try {\n      const params = { amount };\n      if (tier !== null) params.tier = tier;\n      \n      const response = await api.get(`${API_BASE}/distributor/commission-calculator`, { params });\n      return response.data;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  async generateReferralLink() {\n    try {\n      const response = await api.post(`${API_BASE}/distributor/referral-link`);\n      return response.data.referralLink;\n    } catch (error) {\n      this._handleError(error);\n    }\n  }\n  \n  _handleError(error) {\n    let errorMessage = 'An unexpected error occurred';\n    \n    if (error.response) {\n      const { status, data } = error.response;\n      \n      if (data.message) {\n        errorMessage = data.message;\n      } else if (status === 404) {\n        errorMessage = 'The requested resource was not found.';\n      } else if (status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      }\n    } else if (error.request) {\n      errorMessage = 'No response received from server. Please check your connection.';\n    }\n    \n    throw new Error(errorMessage);\n  }\n}\n\nexport default new TradingService();\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,MAAMC,QAAQ,GAAG,KAAK;AAEtB,MAAMC,cAAc,CAAC;EACnB,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,qBAAqB,CAAC;MAChE,OAAOG,QAAQ,CAACE,IAAI,CAACC,UAAU;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAME,iBAAiBA,CAAA,EAAG;IACxB,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,0BAA0B,CAAC;MACrE,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMG,eAAeA,CAACC,UAAU,EAAE;IAChC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,4BAA4BW,UAAU,EAAE,CAAC;MACnF,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMK,kBAAkBA,CAACC,YAAY,EAAE;IACrC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACe,IAAI,CAAC,GAAGd,QAAQ,0BAA0B,EAAEa,YAAY,CAAC;MACpF,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMQ,kBAAkBA,CAACJ,UAAU,EAAEE,YAAY,EAAE;IACjD,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACiB,GAAG,CAAC,GAAGhB,QAAQ,4BAA4BW,UAAU,EAAE,EAAEE,YAAY,CAAC;MACjG,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMU,kBAAkBA,CAACN,UAAU,EAAE;IACnC,IAAI;MACF,MAAMZ,GAAG,CAACmB,MAAM,CAAC,GAAGlB,QAAQ,4BAA4BW,UAAU,EAAE,CAAC;MACrE,OAAO,IAAI;IACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMY,aAAaA,CAACR,UAAU,EAAE;IAC9B,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACe,IAAI,CAAC,GAAGd,QAAQ,4BAA4BW,UAAU,QAAQ,CAAC;MAC1F,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMa,YAAYA,CAACT,UAAU,EAAE;IAC7B,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACe,IAAI,CAAC,GAAGd,QAAQ,4BAA4BW,UAAU,OAAO,CAAC;MACzF,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMc,gBAAgBA,CAACC,YAAY,EAAE;IACnC,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMJ,GAAG,CAACe,IAAI,CAAC,GAAGd,QAAQ,mBAAmB,EAAEsB,YAAY,CAAC;MAC7E,OAAOnB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMgB,iBAAiBA,CAACC,UAAU,EAAE;IAClC,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,qBAAqBwB,UAAU,EAAE,CAAC;MAC5E,OAAOrB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMkB,iBAAiBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,kBAAkB,EAAE;QAAE2B,MAAM,EAAED;MAAQ,CAAC,CAAC;MAClF,OAAOvB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMqB,sBAAsBA,CAACjB,UAAU,EAAE;IACvC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,4BAA4BW,UAAU,cAAc,CAAC;MAC/F,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMsB,yBAAyBA,CAACC,MAAM,EAAEC,SAAS,GAAG,IAAI,EAAEC,IAAI,GAAG,IAAI,EAAE;IACrE,IAAI;MACF,MAAML,MAAM,GAAG;QAAEG;MAAO,CAAC;MAEzB,IAAIC,SAAS,EAAE;QACbJ,MAAM,CAACM,SAAS,GAAGF,SAAS,CAACE,SAAS;QACtCN,MAAM,CAACO,OAAO,GAAGH,SAAS,CAACG,OAAO;MACpC;MAEA,IAAIF,IAAI,KAAK,IAAI,EAAE;QACjBL,MAAM,CAACK,IAAI,GAAGA,IAAI;MACpB;MAEA,MAAM7B,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,0BAA0B,EAAE;QAAE2B;MAAO,CAAC,CAAC;MACjF,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAM4B,qBAAqBA,CAACC,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,IAAI,EAAE;IACpD,IAAI;MACF,MAAMV,MAAM,GAAG;QAAES;MAAM,CAAC;MACxB,IAAIC,MAAM,EAAE;QACVV,MAAM,CAACU,MAAM,GAAGA,MAAM;MACxB;MAEA,MAAMlC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,sBAAsB,EAAE;QAAE2B;MAAO,CAAC,CAAC;MAC7E,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAM+B,mBAAmBA,CAACR,MAAM,GAAG,QAAQ,EAAEO,MAAM,GAAG,IAAI,EAAE;IAC1D,IAAI;MACF,MAAMV,MAAM,GAAG;QAAEG;MAAO,CAAC;MACzB,IAAIO,MAAM,EAAE;QACVV,MAAM,CAACU,MAAM,GAAGA,MAAM;MACxB;MAEA,MAAMlC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,oBAAoB,EAAE;QAAE2B;MAAO,CAAC,CAAC;MAC3E,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMgC,uBAAuBA,CAACC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,EAAE;IAClE,IAAI;MACF,MAAMf,MAAM,GAAG;QAAEa,MAAM;QAAEC,IAAI;QAAEC;MAAM,CAAC;MACtC,MAAMvC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,wBAAwB,EAAE;QAAE2B;MAAO,CAAC,CAAC;MAC/E,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMoC,gBAAgBA,CAACb,MAAM,GAAG,KAAK,EAAE;IACrC,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,oBAAoB,EAAE;QAAE2B,MAAM,EAAE;UAAEG;QAAO;MAAE,CAAC,CAAC;MACvF,OAAO3B,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMqC,uBAAuBA,CAACd,MAAM,GAAG,QAAQ,EAAE;IAC/C,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,gCAAgC,EAAE;QAAE2B,MAAM,EAAE;UAAEG;QAAO;MAAE,CAAC,CAAC;MACnG,OAAO3B,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMsC,kBAAkBA,CAAA,EAAG;IACzB,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,2BAA2B,CAAC;MACtE,OAAOG,QAAQ,CAACE,IAAI,CAACyC,MAAM;IAC7B,CAAC,CAAC,OAAOvC,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMwC,aAAaA,CAACL,KAAK,GAAG,GAAG,EAAEM,MAAM,GAAG,WAAW,EAAEC,KAAK,GAAG,MAAM,EAAE;IACrE,IAAI;MACF,MAAM9C,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,sBAAsB,EAAE;QAChE2B,MAAM,EAAE;UAAEe,KAAK;UAAEM,MAAM;UAAEC;QAAM;MACjC,CAAC,CAAC;MACF,OAAO9C,QAAQ,CAACE,IAAI,CAAC6C,gBAAgB;IACvC,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAM4C,qBAAqBA,CAACC,UAAU,EAAEC,MAAM,EAAE;IAC9C,IAAI;MACF,MAAMlD,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,cAAcoD,UAAU,cAAc,EAAE;QAChFzB,MAAM,EAAE;UAAE0B;QAAO;MACnB,CAAC,CAAC;MACF,OAAOlD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAM+C,mBAAmBA,CAAA,EAAG;IAC1B,IAAI;MACF,MAAMnD,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,4BAA4B,CAAC;MACvE,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMgD,uBAAuBA,CAACzB,MAAM,GAAG,QAAQ,EAAE;IAC/C,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,gCAAgC,EAAE;QAC1E2B,MAAM,EAAE;UAAEG;QAAO;MACnB,CAAC,CAAC;MACF,OAAO3B,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMiD,kBAAkBA,CAAA,EAAG;IACzB,IAAI;MACF,MAAMrD,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,2BAA2B,CAAC;MACtE,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMkD,gBAAgBA,CAACJ,MAAM,EAAEjB,KAAK,GAAG,EAAE,EAAE;IACzC,IAAI;MACF,MAAMjC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,oBAAoB,EAAE;QAC9D2B,MAAM,EAAE;UAAE0B,MAAM;UAAEjB;QAAM;MAC1B,CAAC,CAAC;MACF,OAAOjC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMmD,eAAeA,CAACL,MAAM,EAAEX,KAAK,GAAG,EAAE,EAAE;IACxC,IAAI;MACF,MAAMvC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,wBAAwB,EAAE;QAClE2B,MAAM,EAAE;UAAE0B,MAAM;UAAEX;QAAM;MAC1B,CAAC,CAAC;MACF,OAAOvC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMoD,sBAAsBA,CAACN,MAAM,EAAEO,SAAS,GAAG,IAAI,EAAEC,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;IACzF,IAAI;MACF,MAAM1D,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,+BAA+B,EAAE;QACzE2B,MAAM,EAAE;UAAE0B,MAAM;UAAEO,SAAS;UAAEC,UAAU,EAAEA,UAAU,CAACC,IAAI,CAAC,GAAG;QAAE;MAChE,CAAC,CAAC;MACF,OAAO3D,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMwD,sBAAsBA,CAAA,EAAG;IAC7B,IAAI;MACF,MAAM5D,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,qBAAqB,CAAC;MAChE,OAAOG,QAAQ,CAACE,IAAI,CAAC2D,UAAU;IACjC,CAAC,CAAC,OAAOzD,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAM0D,sBAAsBA,CAAA,EAAG;IAC7B,IAAI;MACF,MAAM9D,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,qBAAqB,CAAC;MAChE,OAAOG,QAAQ,CAACE,IAAI,CAACwD,UAAU;IACjC,CAAC,CAAC,OAAOtD,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAM2D,YAAYA,CAACb,MAAM,EAAEO,SAAS,GAAG,IAAI,EAAEO,IAAI,GAAG,IAAI,EAAEC,EAAE,GAAG,IAAI,EAAE;IACnE,IAAI;MACF,MAAMzC,MAAM,GAAG;QAAE0B,MAAM;QAAEO;MAAU,CAAC;MAEpC,IAAIO,IAAI,EAAExC,MAAM,CAACwC,IAAI,GAAGA,IAAI;MAC5B,IAAIC,EAAE,EAAEzC,MAAM,CAACyC,EAAE,GAAGA,EAAE;MAEtB,MAAMjE,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,qBAAqB,EAAE;QAAE2B;MAAO,CAAC,CAAC;MAC5E,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAM8D,qBAAqBA,CAAA,EAAG;IAC5B,IAAI;MACF,MAAMlE,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,yBAAyB,CAAC;MACpE,OAAOG,QAAQ,CAACE,IAAI,CAACiE,KAAK;IAC5B,CAAC,CAAC,OAAO/D,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMgE,yBAAyBA,CAACC,mBAAmB,GAAG,GAAG,EAAE;IACzD,IAAI;MACF,MAAMrE,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,oBAAoB,EAAE;QAC9D2B,MAAM,EAAE;UAAE6C;QAAoB;MAChC,CAAC,CAAC;MACF,OAAOrE,QAAQ,CAACE,IAAI,CAACoE,aAAa;IACpC,CAAC,CAAC,OAAOlE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMmE,kBAAkBA,CAAA,EAAG;IACzB,IAAI;MACF,MAAMvE,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,+BAA+B,CAAC;MAC1E,OAAOG,QAAQ,CAACE,IAAI,CAACsE,KAAK;IAC5B,CAAC,CAAC,OAAOpE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMqE,uBAAuBA,CAACC,MAAM,EAAE7C,IAAI,GAAG,IAAI,EAAE;IACjD,IAAI;MACF,MAAML,MAAM,GAAG;QAAEkD;MAAO,CAAC;MACzB,IAAI7C,IAAI,KAAK,IAAI,EAAEL,MAAM,CAACK,IAAI,GAAGA,IAAI;MAErC,MAAM7B,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,GAAGJ,QAAQ,oCAAoC,EAAE;QAAE2B;MAAO,CAAC,CAAC;MAC3F,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEA,MAAMuE,oBAAoBA,CAAA,EAAG;IAC3B,IAAI;MACF,MAAM3E,QAAQ,GAAG,MAAMJ,GAAG,CAACe,IAAI,CAAC,GAAGd,QAAQ,4BAA4B,CAAC;MACxE,OAAOG,QAAQ,CAACE,IAAI,CAAC0E,YAAY;IACnC,CAAC,CAAC,OAAOxE,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;IAC1B;EACF;EAEAC,YAAYA,CAACD,KAAK,EAAE;IAClB,IAAIyE,YAAY,GAAG,8BAA8B;IAEjD,IAAIzE,KAAK,CAACJ,QAAQ,EAAE;MAClB,MAAM;QAAEqC,MAAM;QAAEnC;MAAK,CAAC,GAAGE,KAAK,CAACJ,QAAQ;MAEvC,IAAIE,IAAI,CAAC4E,OAAO,EAAE;QAChBD,YAAY,GAAG3E,IAAI,CAAC4E,OAAO;MAC7B,CAAC,MAAM,IAAIzC,MAAM,KAAK,GAAG,EAAE;QACzBwC,YAAY,GAAG,uCAAuC;MACxD,CAAC,MAAM,IAAIxC,MAAM,KAAK,GAAG,EAAE;QACzBwC,YAAY,GAAG,oDAAoD;MACrE;IACF,CAAC,MAAM,IAAIzE,KAAK,CAAC2E,OAAO,EAAE;MACxBF,YAAY,GAAG,iEAAiE;IAClF;IAEA,MAAM,IAAIG,KAAK,CAACH,YAAY,CAAC;EAC/B;AACF;AAEA,eAAe,IAAI/E,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}