{"ast":null,"code":"var _jsxFileName = \"/Users/antenehtessema/Desktop/botsalgo/web_dashboard/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport AuthService from '../services/AuthService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Verify token validity\n          const userData = await AuthService.getCurrentUser();\n          setUser(userData);\n          setIsAuthenticated(true);\n        }\n      } catch (err) {\n        console.error('Auth check failed:', err);\n        localStorage.removeItem('token');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async (email, password, twoFactorCode = null) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      const response = await AuthService.login(email, password, twoFactorCode);\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('refreshToken', response.refreshToken);\n      setUser(response.user);\n      setIsAuthenticated(true);\n      return true;\n    } catch (err) {\n      console.error('Login failed:', err);\n      setError(err.message || 'Login failed. Please check your credentials.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      await AuthService.register(userData);\n      return true;\n    } catch (err) {\n      console.error('Registration failed:', err);\n      setError(err.message || 'Registration failed. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await AuthService.logout();\n    } catch (err) {\n      console.error('Logout error:', err);\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      setIsAuthenticated(false);\n      navigate('/login');\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      const updatedUser = await AuthService.updateProfile(profileData);\n      setUser(updatedUser);\n      return true;\n    } catch (err) {\n      console.error('Profile update failed:', err);\n      setError(err.message || 'Failed to update profile. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"zLYyaohv+2jt6toekfB94sM7wlM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","AuthService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","navigate","checkAuthStatus","token","localStorage","getItem","userData","getCurrentUser","err","console","removeItem","login","email","password","twoFactorCode","response","setItem","refreshToken","message","register","logout","updateProfile","profileData","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/antenehtessema/Desktop/botsalgo/web_dashboard/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport AuthService from '../services/AuthService';\n\n// Create context\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Verify token validity\n          const userData = await AuthService.getCurrentUser();\n          setUser(userData);\n          setIsAuthenticated(true);\n        }\n      } catch (err) {\n        console.error('Auth check failed:', err);\n        localStorage.removeItem('token');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async (email, password, twoFactorCode = null) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      const response = await AuthService.login(email, password, twoFactorCode);\n      \n      localStorage.setItem('token', response.token);\n      localStorage.setItem('refreshToken', response.refreshToken);\n      \n      setUser(response.user);\n      setIsAuthenticated(true);\n      return true;\n    } catch (err) {\n      console.error('Login failed:', err);\n      setError(err.message || 'Login failed. Please check your credentials.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      await AuthService.register(userData);\n      return true;\n    } catch (err) {\n      console.error('Registration failed:', err);\n      setError(err.message || 'Registration failed. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await AuthService.logout();\n    } catch (err) {\n      console.error('Logout error:', err);\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      setIsAuthenticated(false);\n      navigate('/login');\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      const updatedUser = await AuthService.updateProfile(profileData);\n      setUser(updatedUser);\n      return true;\n    } catch (err) {\n      console.error('Profile update failed:', err);\n      setError(err.message || 'Failed to update profile. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}