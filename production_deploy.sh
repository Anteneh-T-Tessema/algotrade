#!/bin/bash
#
# Production Deployment Script for Strategy Analysis System
# This script deploys and manages the complete system in a production environment
#
# Features:
# - Environment setup and validation
# - Dependency installation
# - Data pipeline execution
# - API server deployment
# - Health checks and monitoring
# - System status reporting
#
# Author: GitHub Copilot
# Date: May 20, 2025

# Strict error handling
set -e

# Configuration
export PROJECT_ROOT=$(pwd)
export LOG_DIR="${PROJECT_ROOT}/logs"
export DATA_DIR="${PROJECT_ROOT}/data"
export PORT=${PORT:-8000}
export HOST=${HOST:-0.0.0.0}
export DEBUG=${DEBUG:-false}
export ARCHIVE_RESULTS=${ARCHIVE_RESULTS:-false}
export INSTANCE_NAME=$(hostname)

# Process ID files
API_PID_FILE="${PROJECT_ROOT}/.api_server.pid"
DASHBOARD_PID_FILE="${PROJECT_ROOT}/.dashboard.pid"

# Create necessary directories
mkdir -p "$LOG_DIR"
mkdir -p "$DATA_DIR/archive"
mkdir -p "$DATA_DIR/results"

# Log file setup
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="${LOG_DIR}/deploy_${TIMESTAMP}.log"
SYSTEM_STATE_FILE="${PROJECT_ROOT}/.system_state"

# Function to log messages
log() {
    local message="$1"
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo -e "[$timestamp] $message" | tee -a "$LOG_FILE"
}

# Function to log errors
log_error() {
    local message="$1"
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo -e "[$timestamp] ERROR: $message" | tee -a "$LOG_FILE" >&2
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check environment
check_environment() {
    log "Checking environment..."
    
    # Check Python
    if ! command_exists python; then
        log_error "Python is not installed. Please install Python 3.9+ and try again."
        return 1
    fi
    
    # Check Python version
    PYTHON_VERSION=$(python --version | cut -d' ' -f2)
    log "Found Python version: $PYTHON_VERSION"
    
    # Check virtual environment
    if [ ! -d "venv" ]; then
        log "Virtual environment not found. Creating..."
        python -m venv venv
    fi
    
    # Check requirements are installed
    if [ ! -f "requirements.txt" ]; then
        log_error "requirements.txt not found. Cannot continue."
        return 1
    fi
    
    log "Environment check passed."
    return 0
}

# Function to activate virtual environment
activate_venv() {
    if [ -f "venv/bin/activate" ]; then
        log "Activating virtual environment..."
        source venv/bin/activate
    else
        log_error "Virtual environment activation failed."
        return 1
    fi
    return 0
}

# Function to install or update dependencies
install_dependencies() {
    log "Installing dependencies..."
    python -m pip install --upgrade pip
    python -m pip install -r requirements.txt
    if [ $? -ne 0 ]; then
        log_error "Dependency installation failed."
        return 1
    fi
    log "Dependencies installed successfully."
    return 0
}

# Function to validate data files
validate_data() {
    log "Validating data files..."
    
    # Check if summary report exists and is valid
    if [ -f "${DATA_DIR}/summary_report.csv" ]; then
        log "Found summary report file."
        # Simple validation (check if it's not empty and has required headers)
        if ! head -n 1 "${DATA_DIR}/summary_report.csv" | grep -q "strategy,market_type,total_return"; then
            log_error "Summary report file is invalid."
            return 1
        fi
    else
        log "Summary report not found. It will be generated by the data pipeline."
    fi
    
    # Check if weight table exists and is valid
    if [ -f "${DATA_DIR}/weight_table.json" ]; then
        log "Found weight table file."
        # Simple JSON validation
        if ! python -c "import json; json.load(open('${DATA_DIR}/weight_table.json'))"; then
            log_error "Weight table file is invalid JSON."
            return 1
        fi
    else
        log "Weight table not found. It will be generated by the data pipeline."
    fi
    
    log "Data validation completed."
    return 0
}

# Function to run the data pipeline
run_data_pipeline() {
    log "Running data pipeline..."
    
    # Execute the data pipeline script
    python production_data_pipeline.py
    
    if [ $? -ne 0 ]; then
        log_error "Data pipeline execution failed."
        return 1
    fi
    
    log "Data pipeline completed successfully."
    return 0
}

# Function to start the API server
start_api_server() {
    log "Starting API server..."
    
    # Check if server is already running
    if [ -f "$API_PID_FILE" ]; then
        local pid=$(cat "$API_PID_FILE")
        if ps -p "$pid" > /dev/null; then
            log "API server is already running with PID $pid"
            return 0
        else
            log "Removing stale PID file."
            rm "$API_PID_FILE"
        fi
    fi
    
    # Start the server in the background
    nohup python production_api_server.py > "${LOG_DIR}/api_server_${TIMESTAMP}.log" 2>&1 &
    local pid=$!
    
    # Save the PID
    echo $pid > "$API_PID_FILE"
    log "API server started with PID $pid"
    
    # Wait for server to start up
    sleep 3
    
    # Verify server is running
    if ! ps -p "$pid" > /dev/null; then
        log_error "API server failed to start. Check the logs for details."
        return 1
    fi
    
    log "API server is running at http://${HOST}:${PORT}"
    return 0
}

# Function to start the dashboard application
start_dashboard() {
    if [ ! -d "web_dashboard" ]; then
        log "Web dashboard not found, skipping."
        return 0
    fi
    
    log "Starting web dashboard..."
    
    # Check if dashboard is already running
    if [ -f "$DASHBOARD_PID_FILE" ]; then
        local pid=$(cat "$DASHBOARD_PID_FILE")
        if ps -p "$pid" > /dev/null; then
            log "Dashboard is already running with PID $pid"
            return 0
        else
            log "Removing stale dashboard PID file."
            rm "$DASHBOARD_PID_FILE"
        fi
    fi
    
    # Check if npm is available
    if ! command_exists npm; then
        log_error "npm is not available. Cannot start dashboard."
        return 1
    fi
    
    # Navigate to dashboard directory and start it
    (
        cd web_dashboard
        
        # Install dependencies if needed
        if [ ! -d "node_modules" ]; then
            log "Installing web dashboard dependencies..."
            npm install
            if [ $? -ne 0 ]; then
                log_error "Failed to install dashboard dependencies."
                return 1
            fi
        fi
        
        # Start the dashboard
        log "Starting dashboard server..."
        PORT=3000 REACT_APP_API_URL="http://${HOST}:${PORT}" nohup npm start > "${LOG_DIR}/dashboard_${TIMESTAMP}.log" 2>&1 &
        local dash_pid=$!
        
        # Save the PID
        echo $dash_pid > "$DASHBOARD_PID_FILE"
        
        log "Dashboard started with PID $dash_pid"
        log "Dashboard URL: http://localhost:3000"
    )
    
    return 0
}

# Function to check health of the API server
check_api_health() {
    log "Checking API server health..."
    
    # Attempt to fetch the health endpoint
    if command_exists curl; then
        local health_status=$(curl -s -o /dev/null -w "%{http_code}" "http://${HOST}:${PORT}/health")
        
        if [ "$health_status" = "200" ]; then
            log "API server is healthy (HTTP 200)"
            return 0
        else
            log_error "API server health check failed with HTTP status $health_status"
            return 1
        fi
    else
        log "curl not found, skipping detailed health check."
        
        # Fallback to checking if process is running
        if [ -f "$API_PID_FILE" ]; then
            local pid=$(cat "$API_PID_FILE")
            if ps -p "$pid" > /dev/null; then
                log "API server process is running (PID $pid)"
                return 0
            else
                log_error "API server process is not running"
                return 1
            fi
        else
            log_error "API server PID file not found"
            return 1
        fi
    fi
}

# Function to stop the API server
stop_api_server() {
    log "Stopping API server..."
    
    if [ -f "$API_PID_FILE" ]; then
        local pid=$(cat "$API_PID_FILE")
        if ps -p "$pid" > /dev/null; then
            log "Stopping API server with PID $pid"
            kill $pid
            sleep 2
            
            # Check if process was terminated
            if ps -p "$pid" > /dev/null; then
                log "Process did not terminate gracefully, forcing..."
                kill -9 $pid
                sleep 1
            fi
            
            log "API server stopped"
        else
            log "API server is not running"
        fi
        rm "$API_PID_FILE"
    else
        log "API server PID file not found"
    fi
    
    return 0
}

# Function to stop the dashboard
stop_dashboard() {
    log "Stopping dashboard..."
    
    if [ -f "$DASHBOARD_PID_FILE" ]; then
        local pid=$(cat "$DASHBOARD_PID_FILE")
        if ps -p "$pid" > /dev/null; then
            log "Stopping dashboard with PID $pid"
            kill $pid
            sleep 2
            
            # Check if process was terminated
            if ps -p "$pid" > /dev/null; then
                log "Process did not terminate gracefully, forcing..."
                kill -9 $pid
                sleep 1
            fi
            
            log "Dashboard stopped"
        else
            log "Dashboard is not running"
        fi
        rm "$DASHBOARD_PID_FILE"
    else
        log "Dashboard PID file not found"
    fi
    
    return 0
}

# Function to save the system state
save_system_state() {
    log "Saving system state..."
    
    cat > "$SYSTEM_STATE_FILE" << EOF
{
  "instance": "${INSTANCE_NAME}",
  "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "api_server": {
    "running": $([ -f "$API_PID_FILE" ] && ps -p $(cat "$API_PID_FILE") > /dev/null && echo "true" || echo "false"),
    "pid": $([ -f "$API_PID_FILE" ] && cat "$API_PID_FILE" || echo "null"),
    "port": ${PORT},
    "host": "${HOST}"
  },
  "dashboard": {
    "running": $([ -f "$DASHBOARD_PID_FILE" ] && ps -p $(cat "$DASHBOARD_PID_FILE") > /dev/null && echo "true" || echo "false"),
    "pid": $([ -f "$DASHBOARD_PID_FILE" ] && cat "$DASHBOARD_PID_FILE" || echo "null"),
    "port": 3000
  },
  "data": {
    "summary_report": $([ -f "${DATA_DIR}/summary_report.csv" ] && echo "true" || echo "false"),
    "weight_table": $([ -f "${DATA_DIR}/weight_table.json" ] && echo "true" || echo "false")
  }
}
EOF
    
    log "System state saved to $SYSTEM_STATE_FILE"
    return 0
}

# Function to display system status
show_status() {
    log "System Status:"
    
    if [ -f "$SYSTEM_STATE_FILE" ]; then
        # Parse and format the state file
        local api_running=$(grep -o '"running": true' "$SYSTEM_STATE_FILE" | wc -l)
        local dashboard_running=$(grep -o '"dashboard": {' -A 10 "$SYSTEM_STATE_FILE" | grep -o '"running": true' | wc -l)
        local api_port=$(grep -o '"port": [0-9]*' "$SYSTEM_STATE_FILE" | head -1 | cut -d' ' -f2)
        local timestamp=$(grep -o '"timestamp": "[^"]*' "$SYSTEM_STATE_FILE" | cut -d'"' -f4)
        
        log "  Last updated: $timestamp"
        log "  API Server: $([ "$api_running" -eq 1 ] && echo "RUNNING (port $api_port)" || echo "STOPPED")"
        log "  Dashboard: $([ "$dashboard_running" -eq 1 ] && echo "RUNNING (port 3000)" || echo "STOPPED")"
        
        if [ -f "${DATA_DIR}/summary_report.csv" ]; then
            local strategies=$(cut -d, -f1 "${DATA_DIR}/summary_report.csv" | tail -n +2 | sort | uniq | wc -l)
            local market_types=$(cut -d, -f2 "${DATA_DIR}/summary_report.csv" | tail -n +2 | sort | uniq | wc -l)
            log "  Data: ${strategies} strategies across ${market_types} market types"
        else
            log "  Data: Not available"
        fi
    else
        log "  No system state information available"
        
        # Check processes anyway
        if [ -f "$API_PID_FILE" ] && ps -p $(cat "$API_PID_FILE") > /dev/null; then
            log "  API Server: RUNNING (PID: $(cat "$API_PID_FILE"))"
        else
            log "  API Server: STOPPED"
        fi
        
        if [ -f "$DASHBOARD_PID_FILE" ] && ps -p $(cat "$DASHBOARD_PID_FILE") > /dev/null; then
            log "  Dashboard: RUNNING (PID: $(cat "$DASHBOARD_PID_FILE"))"
        else
            log "  Dashboard: STOPPED"
        fi
    fi
    
    return 0
}

# Function to display help
show_help() {
    echo "Usage: $0 [command]"
    echo
    echo "Commands:"
    echo "  start       Start the complete system"
    echo "  stop        Stop all components"
    echo "  restart     Restart all components"
    echo "  status      Show system status"
    echo "  pipeline    Run only the data pipeline"
    echo "  api         Start only the API server"
    echo "  dashboard   Start only the dashboard"
    echo "  health      Check system health"
    echo "  logs        Rotate system logs"
    echo "  help        Show this help message"
    echo
    echo "Environment variables:"
    echo "  PORT                API server port (default: 8000)"
    echo "  HOST                API server host (default: 0.0.0.0)"
    echo "  DEBUG               Enable debug mode (default: false)"
    echo "  ARCHIVE_RESULTS     Archive result files after processing (default: false)"
    echo
}

# Main script execution

# Process command
COMMAND=${1:-"help"}

case "$COMMAND" in
    start)
        log "Starting complete system..."
        
        check_environment || exit 1
        activate_venv || exit 1
        install_dependencies || exit 1
        validate_data
        run_data_pipeline || log "Warning: Data pipeline failed, but continuing..."
        start_api_server || log_error "API server failed to start"
        start_dashboard || log_error "Dashboard failed to start"
        check_api_health
        save_system_state
        show_status
        
        log "System startup completed"
        ;;
        
    stop)
        log "Stopping all components..."
        
        stop_dashboard
        stop_api_server
        save_system_state
        show_status
        
        log "System shutdown completed"
        ;;
        
    restart)
        log "Restarting system..."
        
        "$0" stop
        sleep 2
        "$0" start
        
        log "System restart completed"
        ;;
        
    status)
        show_status
        ;;
        
    pipeline)
        log "Running data pipeline only..."
        
        check_environment || exit 1
        activate_venv || exit 1
        run_data_pipeline
        save_system_state
        
        log "Data pipeline execution completed"
        ;;
        
    api)
        log "Starting API server only..."
        
        check_environment || exit 1
        activate_venv || exit 1
        validate_data
        start_api_server
        check_api_health
        save_system_state
        
        log "API server startup completed"
        ;;
        
    dashboard)
        log "Starting dashboard only..."
        
        check_environment || exit 1
        activate_venv || exit 1
        start_dashboard
        save_system_state
        
        log "Dashboard startup completed"
        ;;
        
    health)
        log "Checking system health..."
        
        check_api_health
        show_status
        
        log "Health check completed"
        ;;
        
    logs)
        log "Rotating system logs..."
        
        if [ -f "./rotate_logs.sh" ]; then
            chmod +x ./rotate_logs.sh
            ./rotate_logs.sh
            log "Log rotation completed"
        elif command -v logrotate >/dev/null 2>&1 && [ -f "./logrotate.conf" ]; then
            log "Using system logrotate"
            logrotate -f ./logrotate.conf
            log "Log rotation completed"
        else
            log_error "No log rotation method available. Missing rotate_logs.sh or logrotate"
            exit 1
        fi
        ;;
        
    help|*)
        show_help
        ;;
esac

exit 0
